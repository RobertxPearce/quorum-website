use Libraries.Web.Page.Division
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.Image
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableBody
use Libraries.Containers.Array
use Libraries.Web.Page.TableHeader
use Libraries.Web.Page.Form
use Libraries.Web.Page.Label
use Libraries.Web.Page.Bold
use Libraries.Web.Page.Input
use Libraries.Web.Page.Span
use Libraries.Web.Page.Button
use Libraries.Web.Page.Script
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Link


class HoCDataScience2 is HourOfCodeDataScience
    integer ACTIVITY = 2
    text SUBTITLE = "Labeling a Chart"

    action Setup()
// set values for the block ide on this page
        SetPaletteFileName("palette/dataScience2.xml")
        SetCodeForBlocks("html/hourofcode/datascience/datascience2.quorum")
        Setup(ACTIVITY, SUBTITLE, GetIntro(), GetInstructions(), GetBlockIDE(), GetQuestions())
    end

    action GetIntro() returns Division
        text dq = ""
        dq = dq:GetDoubleQuote()
        Division intro
        Preformatter pre

        // tracking pixel for code.org
        //intro:AddImage("https://code.org/api/hour/begin_quorum_astronomy.png", "")
        intro:AddParagraph("")
        Paragraph p1
        p1:AddText("Now we can investigate our data using a Scatter Plot instead of just looking at columns and rows in a spreadsheet. This can be helpful in exploring the relationship between two variables by 
plotting them on the X and Y axes. But before we move on, we should make sure we are using good labels on our chart. Looking at the same")
        Link link1 = p1:AddLink("Penguins1.csv", "/data/Penguins1.csv")
        link1:AddClassAttribute("underline text-quorum-blue-150")
        p1:AddText(" dataset, you might notice that the headers are sort of funny to read; 'bill_depth' and 'bill_length'. 
These headers are used for the labels of the X and Y axes when we make our chart by default, but we can make them (and the title/subtitle at the top) say whatever we want.")
        intro:Add(p1)
        intro:AddParagraph("")

        WebTable table = AddWebTable("Sample of Penguins1.CSV file")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("bill_depth")
        tableHeaderArray:Add("bill_length") 

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> penguinData1
        penguinData1:Add("18.7") 
        penguinData1:Add("39.1") 
        tableBody:Add(AddTableBodyRow(penguinData1))

        Array<text> penguinData2
        penguinData2:Add("18.3") 
        penguinData2:Add("37.8") 
        tableBody:Add(AddTableBodyRow(penguinData2))

        Array<text> penguinData3
        penguinData3:Add("18.5") 
        penguinData3:Add("36.8") 
        tableBody:Add(AddTableBodyRow(penguinData3))

        Array<text> penguinData4
        penguinData4:Add("13.2") 
        penguinData4:Add("46.1") 
        tableBody:Add(AddTableBodyRow(penguinData4))

        Array<text> penguinData5
        penguinData5:Add("17.9") 
        penguinData5:Add("46.5") 
        tableBody:Add(AddTableBodyRow(penguinData5))
    
        table:Add(tableBody)
        intro:Add(table)

        
        return intro

    end

    action GetInstructions() returns Division
        Division instructions

        instructions:AddParagraph("")
        instructions:AddParagraph("In the code editor below, we have a program that creates a Chart with default labels. Take code blocks from the palette and place them below where we make the Chart object but before we Display it.")
        OrderedList instructionsList
        instructionsList:AddListItem("<b>Make up a new Chart title, Chart subtitle, X axis title and Y axis title.</b>")
        instructionsList:AddClassAttribute("list-decimal list-outside pl-8")
        instructions:Add(instructionsList)  
        instructions:AddParagraph("")

        return instructions
    end

    action GetQuestions() returns Division
        Division questions
        
        questions:AddParagraph("")
        questions:AddParagraph("Use the chart(s) you've created in the <i>Coding</i> section to answer a few questions.")
        questions:AddParagraph("")

        Form questionForm
        
        questionForm:SetClassAttribute("questionform")
        questionForm:SetIdentifier("questionform")
        //questionForm:AddAttribute("method", "post")
        //questionForm:SetOnSubmit("checkAnswers(); event.preventDefault();")

        questions:Add(questionForm)
        
        //FieldSet questionSet

        //questionForm:Add(questionSet)

        //13.1 21.5 32.1 59.6
        Label question1
        Bold bold_question1
        bold_question1:AddText("1. What variable is shown on the X axis?")
        question1:Add(bold_question1)
        question1:SetIdentifier("question1")
        question1:AddAttribute("for","input1")
        question1:SetClassAttribute("mx-2")
        
        Input input1
        input1:SetType("text")
        input1:SetPlaceHolder("0")
        input1:SetClassAttribute("mx-2 p-2 rounded-md border border-neutral-grey-50")
        input1:SetIdentifier("input1")

        Span validation1
        validation1:SetIdentifier("validation1")
        validation1:SetClassAttribute("mx-2 text-sm text-red-500 hidden")

        questionForm:Add(question1)
        questionForm:AddText("<br>")
        questionForm:Add(input1)
        questionForm:AddText("<br>")
        questionForm:Add(validation1)
        questionForm:AddText("<br>")
        
        Label question2
        Bold bold_question2
        bold_question2:AddText("2. What variable is shown on the Y axis?")
        question2:Add(bold_question2)
        question2:SetIdentifier("question2")
        question2:AddAttribute("for","input2")
        question2:SetClassAttribute("mx-2")
        
        Input input2
        input2:SetType("text")
        input2:SetPlaceHolder("0")
        input2:SetClassAttribute("mx-2 p-2 rounded-md border border-neutral-grey-50")
        input2:SetIdentifier("input2")

        Span validation2
        validation2:SetIdentifier("validation2")
        validation2:SetClassAttribute("mx-2 text-sm text-red-500 hidden")
       
        questionForm:Add(question2)
        questionForm:AddText("<br>")
        questionForm:Add(input2)
        questionForm:AddText("<br>")
        questionForm:Add(validation2)
        questionForm:AddText("<br>")

        Button checkAnswers
        checkAnswers:SetType("button")
        checkAnswers:SetOnClick("checkAnswers();")
        checkAnswers:AddText("Check Answers")
        //pulled these attributes from some other buttons on the site
        checkAnswers:AddClassAttribute("py-2 px-10 w-fit bg-quorum-blue-100 ml-4 font-bold captitalize rounded-2xl")
        //turning off post until the backend is setup, just do frontend validation

        questionForm:Add(checkAnswers)

        Script script
        text quote = ""
        quote = quote:GetDoubleQuote()
        script:SetCode("
        function checkAnswers() {
            var totalCorrect = 0;
            var totalQuestions = 3;

            var input = $('#input1');
            var validation = $('#validation1');
            if (input[0].value === undefined || input[0].value === '') {
                input.removeClass('valid border-neutral-grey-50')
                input.addClass('border-attention-red-100');
                validation.removeClass('hidden valid')
                validation.addClass('invalid');
                validation.text('Please enter an answer.');
            }
//            else if (input[0].value >= 58 && input[0].value <= 61) {
//                input.removeClass('border-attention-red-100 border-neutral-grey-50');
//                input.addClass('valid');
//                validation.addClass('hidden');
//                validation.removeClass('valid invalid');
//                totalCorrect += totalCorrect;
//            }
//            else {
//                input.removeClass('valid border-neutral-grey-50');
//                input.addClass('border-attention-red-100');
//                validation.removeClass('hidden valid');
//                validation.addClass('invalid');
//                validation.text('Incorrect, please try again.');
//            }

            var input = $('#input2');
            var validation = $('#validation2');
            if (input[0].value === undefined || input[0].value === '') {
                input.removeClass('valid border-neutral-grey-50')
                input.addClass('border-attention-red-100');
                validation.removeClass('hidden valid')
                validation.addClass('invalid');
                validation.text('Please enter an answer.');
            }
//            else if (input[0].value >= 21 && input[0].value <= 22) {
//                input.removeClass('border-attention-red-100 border-neutral-grey-50');
//                input.addClass('valid');
//                validation.addClass('hidden');
//                validation.removeClass('valid invalid');
//                totalCorrect += totalCorrect;
//            }
//            else {
//                input.removeClass('valid border-neutral-grey-50');
//                input.addClass('border-attention-red-100');
//                validation.removeClass('hidden valid');
//                validation.addClass('invalid');
//                validation.text('Incorrect, please try again.');
//            }
                
        };
        ")

        questions:Add(script)
       

        return questions
    end

//    action GetIDE() returns IDE
//        CodeForIDE code
//        code:AddFileUrl("Main.quorum", "html/hourofcode/datascience/datascience2.quorum")
//        IDE ide = AddIDE()
//        ide:SetLightTheme()
//        ide:SetCodeForIDE(code:GetJsonArray())
//        ide:SetIdeTitle("Type your code below...")
//        
//        return ide
//    end

    action GetLocation returns text
        return "hourofcode/datascience" + ACTIVITY + ".html"
    end

    action GetLinkName returns text
        return  SUBTITLE
    end

    action GetSectionName returns text
        return "Data Science"
    end

    action GetName returns text
        return SUBTITLE
    end

    action GetShortDescription returns text
        return "how to custimze the labels on a Chart."
    end
end
