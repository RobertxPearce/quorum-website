use Libraries.Web.Page.Division
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.Image
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableBody
use Libraries.Containers.Array
use Libraries.Web.Page.TableHeader
use Libraries.Web.Page.Form
use Libraries.Web.Page.Label
use Libraries.Web.Page.Bold
use Libraries.Web.Page.Input
use Libraries.Web.Page.Span
use Libraries.Web.Page.Button
use Libraries.Web.Page.Script
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Link


class HoCDataScience3 is HourOfCodeDataScience
    integer ACTIVITY = 3
    text SUBTITLE = "Selecting the Data"

    action Setup()
// set values for the block ide on this page
        SetPaletteFileName("palette/dataScience3.xml")
        SetCodeForBlocks("html/hourofcode/datascience/datascience3.quorum")
        Setup(ACTIVITY, SUBTITLE, GetIntro(), GetInstructions(), GetBlockIDE(), GetQuestions())
    end

    action GetIntro() returns Division
        text dq = ""
        dq = dq:GetDoubleQuote()
        Division intro
        Preformatter pre

        // tracking pixel for code.org
        //intro:AddImage("https://code.org/api/hour/begin_quorum_astronomy.png", "")

        intro:AddParagraph("")
        Paragraph p1
        p1:AddText("Now that we're getting the hang of it, we can start to explore more data. Often times, data scientist have large datasets with many different columns, and they might investigate how different variables have different 
relationships. In the Table below, we can see a sample of ")
        Link link1 = p1:AddLink("Penguins2.csv", "/data/Penguins2.csv")
        link1:AddClassAttribute("underline text-quorum-blue-150")
        p1:AddText(". This dataset is a lot like our Penguins1.csv, except it has a few more columns. For each entry, we can look at the species of the penguin (Adelie, Gentoo, Chinstrap), which 
island it lives on (Torgersen, Biscoe, Dream), and some measurements like bill length, bill depth and flipper length.")
        intro:Add(p1)
        intro:AddParagraph("")

        WebTable table = AddWebTable("Sample of Penguins2.CSV file")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("species") 
        tableHeaderArray:Add("island")
        tableHeaderArray:Add("bill_depth")
        tableHeaderArray:Add("bill_length") 
        tableHeaderArray:Add("flipper_length")

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> penguinData1
        penguinData1:Add("Adelie")
        penguinData1:Add("Torgersen")
        penguinData1:Add("18.7") 
        penguinData1:Add("39.1") 
        penguinData1:Add("181")
        tableBody:Add(AddTableBodyRow(penguinData1))

        Array<text> penguinData2
        penguinData2:Add("Adelie")
        penguinData2:Add("Biscoe") 
        penguinData2:Add("18.3") 
        penguinData2:Add("37.8") 
        penguinData2:Add("174")
        tableBody:Add(AddTableBodyRow(penguinData2))

        Array<text> penguinData3
        penguinData3:Add("Adelie")
        penguinData3:Add("Dream") 
        penguinData3:Add("18.5") 
        penguinData3:Add("36.8") 
        penguinData3:Add("193")
        tableBody:Add(AddTableBodyRow(penguinData3))

        Array<text> penguinData4
        penguinData4:Add("Gentoo")
        penguinData4:Add("Biscoe") 
        penguinData4:Add("13.2") 
        penguinData4:Add("46.1") 
        penguinData4:Add("211")
        tableBody:Add(AddTableBodyRow(penguinData4))

        Array<text> penguinData5
        penguinData5:Add("Chinstrap")
        penguinData5:Add("Dream") 
        penguinData5:Add("17.9") 
        penguinData5:Add("46.5") 
        penguinData5:Add("192")
        tableBody:Add(AddTableBodyRow(penguinData5))
    
        table:Add(tableBody)
        intro:Add(table)

        return intro

    end

    action GetInstructions() returns Division
        Division instructions

        instructions:AddParagraph("")
        instructions:AddParagraph("In the code editor below, we have a program that makes a Chart. Take code blocks from the palette and place them below where we Load the .csv, but before we make the Chart object.")
        OrderedList instructionsList
        instructionsList:AddListItem("<b>Select the columns bill_depth, bill_length and flipper_length.</b>")
        instructionsList:AddClassAttribute("list-decimal list-outside pl-8")
        instructions:Add(instructionsList)  
        instructions:AddParagraph("")

        return instructions
    end

    action GetQuestions() returns Division
        Division questions
        
        questions:AddParagraph("")
        questions:AddParagraph("Use the chart(s) you've created in the <i>Coding</i> section to answer a few questions.")
        questions:AddParagraph("")

        Form questionForm
        
        questionForm:SetClassAttribute("questionform")
        questionForm:SetIdentifier("questionform")
        //questionForm:AddAttribute("method", "post")
        //questionForm:SetOnSubmit("checkAnswers(); event.preventDefault();")

        questions:Add(questionForm)
        
        //FieldSet questionSet

        //questionForm:Add(questionSet)

        //13.1 21.5 32.1 59.6
        Label question1
        Bold bold_question1
        bold_question1:AddText("1. What's the largest flipper length?")
        question1:Add(bold_question1)
        question1:SetIdentifier("question1")
        question1:AddAttribute("for","input1")
        question1:SetClassAttribute("mx-2")
        
        Input input1
        input1:SetType("number")
        input1:SetPlaceHolder("0")
        input1:SetClassAttribute("mx-2 p-2 rounded-md border border-neutral-grey-50")
        input1:SetIdentifier("input1")

        Span validation1
        validation1:SetIdentifier("validation1")
        validation1:SetClassAttribute("mx-2 text-sm text-red-500 hidden")

        questionForm:Add(question1)
        questionForm:AddText("<br>")
        questionForm:Add(input1)
        questionForm:AddText("<br>")
        questionForm:Add(validation1)
        questionForm:AddText("<br>")
        
        Label question2
        Bold bold_question2
        bold_question2:AddText("2. What's the shortest flipper length?")
        question2:Add(bold_question2)
        question2:SetIdentifier("question2")
        question2:AddAttribute("for","input2")
        question2:SetClassAttribute("mx-2")
        
        Input input2
        input2:SetType("number")
        input2:SetPlaceHolder("0")
        input2:SetClassAttribute("mx-2 p-2 rounded-md border border-neutral-grey-50")
        input2:SetIdentifier("input2")

        Span validation2
        validation2:SetIdentifier("validation2")
        validation2:SetClassAttribute("mx-2 text-sm text-red-500 hidden")
       
        questionForm:Add(question2)
        questionForm:AddText("<br>")
        questionForm:Add(input2)
        questionForm:AddText("<br>")
        questionForm:Add(validation2)
        questionForm:AddText("<br>")

        Button checkAnswers
        checkAnswers:SetType("button")
        checkAnswers:SetOnClick("checkAnswers();")
        checkAnswers:AddText("Check Answers")
        //pulled these attributes from some other buttons on the site
        checkAnswers:AddClassAttribute("py-2 px-10 w-fit bg-quorum-blue-100 ml-4 font-bold captitalize rounded-2xl")
        //turning off post until the backend is setup, just do frontend validation

        questionForm:Add(checkAnswers)

        Script script
        text quote = ""
        quote = quote:GetDoubleQuote()
        script:SetCode("
        function checkAnswers() {
            var totalCorrect = 0;
            var totalQuestions = 2;

            var input = $('#input1');
            var validation = $('#validation1');
            if (input[0].value === undefined || input[0].value === '') {
                input.removeClass('valid border-neutral-grey-50')
                input.addClass('border-attention-red-100');
                validation.removeClass('hidden valid')
                validation.addClass('invalid');
                validation.text('Please enter an answer.');
            }
            else if (input[0].value >= 230 && input[0].value <= 232) {
                input.removeClass('border-attention-red-100 border-neutral-grey-50');
                input.addClass('valid');
                validation.addClass('hidden');
                validation.removeClass('valid invalid');
                totalCorrect += totalCorrect;
            }
            else {
                input.removeClass('valid border-neutral-grey-50');
                input.addClass('border-attention-red-100');
                validation.removeClass('hidden valid');
                validation.addClass('invalid');
                validation.text('Incorrect, please try again.');
            }

            var input = $('#input2');
            var validation = $('#validation2');
            if (input[0].value === undefined || input[0].value === '') {
                input.removeClass('valid border-neutral-grey-50')
                input.addClass('border-attention-red-100');
                validation.removeClass('hidden valid')
                validation.addClass('invalid');
                validation.text('Please enter an answer.');
            }
            else if (input[0].value >= 171 && input[0].value <= 173) {
                input.removeClass('border-attention-red-100 border-neutral-grey-50');
                input.addClass('valid');
                validation.addClass('hidden');
                validation.removeClass('valid invalid');
                totalCorrect += totalCorrect;
            }
            else {
                input.removeClass('valid border-neutral-grey-50');
                input.addClass('border-attention-red-100');
                validation.removeClass('hidden valid');
                validation.addClass('invalid');
                validation.text('Incorrect, please try again.');
            }
                
        };
        ")

        questions:Add(script)
       

        return questions
    end

//    action GetIDE() returns IDE
//        CodeForIDE code
//        code:AddFileUrl("Main.quorum", "html/hourofcode/datascience/datascience3.quorum")
//        IDE ide = AddIDE()
//        ide:SetLightTheme()
//        ide:SetCodeForIDE(code:GetJsonArray())
//        ide:SetIdeTitle("Type your code below...")
//        
//        return ide
//    end

    action GetLocation returns text
        return "hourofcode/datascience" + ACTIVITY + ".html"
    end

    action GetLinkName returns text
        return SUBTITLE
    end

    action GetSectionName returns text
        return "Data Science"
    end

    action GetName returns text
        return SUBTITLE
    end

    action GetShortDescription returns text
        return "how to select different columns to display."
    end
end
