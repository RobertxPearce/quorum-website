use Libraries.Web.Page.Division
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.Image
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableBody
use Libraries.Containers.Array
use Libraries.Web.Page.TableHeader
use Libraries.Web.Page.Form
use Libraries.Web.Page.Label
use Libraries.Web.Page.Bold
use Libraries.Web.Page.Input
use Libraries.Web.Page.Span
use Libraries.Web.Page.Button
use Libraries.Web.Page.Script
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Link


class HoCDataScience7 is HourOfCodeDataScience
    integer ACTIVITY = 7
    text SUBTITLE = "Trying Other Charts"

    action Setup()
// set values for the block ide on this page
        SetPaletteFileName("palette/dataScience7.xml")
        SetCodeForBlocks("html/hourofcode/datascience/datascience7.quorum")
        Setup(ACTIVITY, SUBTITLE, GetIntro(), GetInstructions(), GetBlockIDE(), GetQuestions())
    end

    action GetIntro() returns Division
        text dq = ""
        dq = dq:GetDoubleQuote()
        Division intro
        Preformatter pre

        // tracking pixel for code.org
        //intro:AddImage("https://code.org/api/hour/begin_quorum_astronomy.png", "")
        intro:AddParagraph("")
        Paragraph p1
        p1:AddText("There are a lot of chart types that can help us to answer different questions. Instead of making a Scatter Plot, let's try making some other chart types from the same data. Try making a Bar Chart, Box Plot, 
Histogram and Pie Chart. Each of these charts will show the same data from our ")
        Link link1 = p1:AddLink("Penguins2.csv", "/data/Penguins2.csv")
        link1:AddClassAttribute("underline text-quorum-blue-150")
        p1:AddText(" but presents it in a different way.")
        intro:Add(p1)
        intro:AddParagraph("")
        
        WebTable table = AddWebTable("Sample of Penguins2.CSV file")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("species") 
        tableHeaderArray:Add("island")
        tableHeaderArray:Add("bill_depth")
        tableHeaderArray:Add("bill_length") 
        tableHeaderArray:Add("flipper_length")

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> penguinData1
        penguinData1:Add("Adelie")
        penguinData1:Add("Torgersen")
        penguinData1:Add("18.7") 
        penguinData1:Add("39.1") 
        penguinData1:Add("181")
        tableBody:Add(AddTableBodyRow(penguinData1))

        Array<text> penguinData2
        penguinData2:Add("Adelie")
        penguinData2:Add("Biscoe") 
        penguinData2:Add("18.3") 
        penguinData2:Add("37.8") 
        penguinData2:Add("174")
        tableBody:Add(AddTableBodyRow(penguinData2))

        Array<text> penguinData3
        penguinData3:Add("Adelie")
        penguinData3:Add("Dream") 
        penguinData3:Add("18.5") 
        penguinData3:Add("36.8") 
        penguinData3:Add("193")
        tableBody:Add(AddTableBodyRow(penguinData3))

        Array<text> penguinData4
        penguinData4:Add("Gentoo")
        penguinData4:Add("Biscoe") 
        penguinData4:Add("13.2") 
        penguinData4:Add("46.1") 
        penguinData4:Add("211")
        tableBody:Add(AddTableBodyRow(penguinData4))

        Array<text> penguinData5
        penguinData5:Add("Chinstrap")
        penguinData5:Add("Dream") 
        penguinData5:Add("17.9") 
        penguinData5:Add("46.5") 
        penguinData5:Add("192")
        tableBody:Add(AddTableBodyRow(penguinData5))
    
        table:Add(tableBody)
        intro:Add(table)

        return intro

    end

    action GetInstructions() returns Division
        Division instructions
        
        instructions:AddParagraph("")
        instructions:AddParagraph("In the code editor below, we have a similar program to the last lesson, except we've removed the code black that makes our chart a Scatter Plot. Add a code block from the palette below and place it above the other blocks that reference <i>chart</i>.")
        OrderedList instructionsList
        instructionsList:AddListItem("<b>Make a Bar Chart.</b>")
        instructionsList:AddListItem("<b>Repeat this for each Chart type one at a time and run the program. Remove the Chart type block you don't want and replace it with the one you do want.</b>")
        instructionsList:AddListItem("<i>Hint: You may need to try different Chart types to find the answers to the questions below.</i>")
        instructionsList:AddClassAttribute("list-decimal list-outside pl-8")
        instructions:Add(instructionsList)  
        instructions:AddParagraph("")

        return instructions
    end

    action GetIDE() returns IDE
        CodeForIDE code
        code:AddFileUrl("Main.quorum", "html/hourofcode/datascience/datascience7.quorum")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetCodeForIDE(code:GetJsonArray())
        ide:SetIdeTitle("Type your code below...")
        
        return ide
    end

    action GetQuestions() returns Division
        Division questions
        
        questions:AddParagraph("")
        questions:AddParagraph("Use the chart(s) you've created in the <i>Coding</i> section to answer a few questions.")
        questions:AddParagraph("")

        Form questionForm
        
        questionForm:SetClassAttribute("questionform")
        questionForm:SetIdentifier("questionform")
        //questionForm:AddAttribute("method", "post")
        //questionForm:SetOnSubmit("checkAnswers(); event.preventDefault();")

        questions:Add(questionForm)
        
        //FieldSet questionSet

        //questionForm:Add(questionSet)

        //13.1 21.5 32.1 59.6
        Label question1
        Bold bold_question1
        bold_question1:AddText("1. Which group has the most combined bill length?")
        question1:Add(bold_question1)
        question1:SetIdentifier("question1")
        question1:AddAttribute("for","input1")
        question1:SetClassAttribute("mx-2")
        
        Input input1
        input1:SetType("text")
        input1:SetPlaceHolder("0")
        input1:SetClassAttribute("mx-2 p-2 rounded-md border border-neutral-grey-50")
        input1:SetIdentifier("input1")

        Span validation1
        validation1:SetIdentifier("validation1")
        validation1:SetClassAttribute("mx-2 text-sm text-red-500 hidden")

        questionForm:Add(question1)
        questionForm:AddText("<br>")
        questionForm:Add(input1)
        questionForm:AddText("<br>")
        questionForm:Add(validation1)
        questionForm:AddText("<br>")
        
        Label question2
        Bold bold_question2
        bold_question2:AddText("2. Which group has smallest range of bill length values?")
        question2:Add(bold_question2)
        question2:SetIdentifier("question2")
        question2:AddAttribute("for","input2")
        question2:SetClassAttribute("mx-2")
        
        Input input2
        input2:SetType("text")
        input2:SetPlaceHolder("0")
        input2:SetClassAttribute("mx-2 p-2 rounded-md border border-neutral-grey-50")
        input2:SetIdentifier("input2")

        Span validation2
        validation2:SetIdentifier("validation2")
        validation2:SetClassAttribute("mx-2 text-sm text-red-500 hidden")
       
        questionForm:Add(question2)
        questionForm:AddText("<br>")
        questionForm:Add(input2)
        questionForm:AddText("<br>")
        questionForm:Add(validation2)
        questionForm:AddText("<br>")

        Label question3
        Bold bold_question3
        bold_question3:AddText("3. What is the value of the bin with the highest frequency?")
        question3:Add(bold_question3)
        question3:SetIdentifier("question3")
        question3:AddAttribute("for","input3")
        question3:SetClassAttribute("mx-2")
        
        Input input3
        input3:SetType("number")
        input3:SetPlaceHolder("0")
        input3:SetClassAttribute("mx-2 p-2 rounded-md border border-neutral-grey-50")
        input3:SetIdentifier("input2")

        Span validation3
        validation3:SetIdentifier("validation3")
        validation3:SetClassAttribute("mx-2 text-sm text-red-500 hidden")
       
        questionForm:Add(question3)
        questionForm:AddText("<br>")
        questionForm:Add(input3)
        questionForm:AddText("<br>")
        questionForm:Add(validation3)
        questionForm:AddText("<br>")

        Label question4
        Bold bold_question4
        bold_question4:AddText("4. What percentage of the data was in the Dream group?")
        question4:Add(bold_question4)
        question4:SetIdentifier("question4")
        question4:AddAttribute("for","input4")
        question4:SetClassAttribute("mx-2")
        
        Input input4
        input4:SetType("number")
        input4:SetPlaceHolder("0")
        input4:SetClassAttribute("mx-2 p-2 rounded-md border border-neutral-grey-50")
        input4:SetIdentifier("input4")

        Span validation4
        validation4:SetIdentifier("validation4")
        validation4:SetClassAttribute("mx-2 text-sm text-red-500 hidden")
       
        questionForm:Add(question4)
        questionForm:AddText("<br>")
        questionForm:Add(input4)
        questionForm:AddText("<br>")
        questionForm:Add(validation4)
        questionForm:AddText("<br>")

        Button checkAnswers
        checkAnswers:SetType("button")
        checkAnswers:SetOnClick("checkAnswers();")
        checkAnswers:AddText("Submit Answers")
        //pulled these attributes from some other buttons on the site
        checkAnswers:AddClassAttribute("py-2 px-10 w-fit bg-quorum-blue-100 ml-4 font-bold captitalize rounded-2xl")
        //turning off post until the backend is setup, just do frontend validation

        questionForm:Add(checkAnswers)

        Script script
        text quote = ""
        quote = quote:GetDoubleQuote()
        script:SetCode("
        function checkAnswers() {
            var totalCorrect = 0;
            var totalQuestions = 4;

            var input = $('#input1');
            var validation = $('#validation1');
            if (input[0].value === undefined || input[0].value === '') {
                input.removeClass('border-neutral-grey-50 border-green-500')
                input.addClass('border-red-500');
                validation.removeClass('hidden text-green-500')
                validation.addClass('text-red-500');
                validation.text('Please enter an answer.');
            }
            else {
                input.removeClass('border-neutral-grey-50 border-red-500');
                input.addClass('border-green-500');
                validation.removeClass('hidden text-red-500')
                validation.addClass('text-green-500');
                validation.text('Submitted.');
                totalCorrect += totalCorrect;
            }
            
            var input = $('#input2');
            var validation = $('#validation2');
            if (input[0].value === undefined || input[0].value === '') {
                input.removeClass('border-neutral-grey-50 border-green-500')
                input.addClass('border-red-500');
                validation.removeClass('hidden text-green-500')
                validation.addClass('text-red-500');
                validation.text('Please enter an answer.');
            }
            else {
                input.removeClass('border-neutral-grey-50 border-red-500');
                input.addClass('border-green-500');
                validation.removeClass('hidden text-red-500')
                validation.addClass('text-green-500');
                validation.text('Submitted.');
                totalCorrect += totalCorrect;
            }

            var input = $('#input3');
            var validation = $('#validation3');
            if (input[0].value === undefined || input[0].value === '') {
                input.removeClass('border-neutral-grey-50 border-green-500')
                input.addClass('border-red-500');
                validation.removeClass('hidden text-green-500')
                validation.addClass('text-red-500');
                validation.text('Please enter an answer.');
            }
            else {
            //else if (input[0].value >= 132 && input[0].value <= 137) {
                input.removeClass('border-neutral-grey-50 border-red-500');
                input.addClass('border-green-500');
                validation.removeClass('hidden text-red-500')
                validation.addClass('text-green-500');
                validation.text('Submitted.');
                totalCorrect += totalCorrect;
            }
//            else {
//                input.removeClass('valid border-neutral-grey-50');
//                input.addClass('border-attention-red-100');
//                validation.removeClass('hidden valid');
//                validation.addClass('invalid');
//                validation.text('Incorrect, please try again.');
//            }

            var input = $('#input4');
            var validation = $('#validation4');
            if (input[0].value === undefined || input[0].value === '') {
                input.removeClass('border-neutral-grey-50 border-green-500')
                input.addClass('border-red-500');
                validation.removeClass('hidden text-green-500')
                validation.addClass('text-red-500');
                validation.text('Please enter an answer.');
            }
            else {
            //else if (input[0].value >= 37 && input[0].value <= 38) {
                input.removeClass('border-neutral-grey-50 border-red-500');
                input.addClass('border-green-500');
                validation.removeClass('hidden text-red-500')
                validation.addClass('text-green-500');
                validation.text('Submitted.');
                totalCorrect += totalCorrect;
            }
//            else {
//                input.removeClass('valid border-neutral-grey-50');
//                input.addClass('border-attention-red-100');
//                validation.removeClass('hidden valid');
//                validation.addClass('invalid');
//                validation.text('Incorrect, please try again.');
//            }
 
        };
        ")

        questions:Add(script)
       

        return questions
    end

    action GetLocation returns text
        return "hourofcode/datascience" + ACTIVITY + ".html"
    end

    action GetLinkName returns text
        return  SUBTITLE
    end

    action GetSectionName returns text
        return "Data Science"
    end

    action GetName returns text
        return SUBTITLE
    end

    action GetShortDescription returns text
        return "how to look at data with different Chart types."
    end
end
