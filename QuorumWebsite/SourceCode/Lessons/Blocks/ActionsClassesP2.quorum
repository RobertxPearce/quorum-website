use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image
use Libraries.Web.Page.Bold

class ActionsAndClassesP2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Actions and Classes, Part 2 - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour 13: Classes and Actions - Part 2", 1)

        headDiv:AddText("This lesson is to teach you about actions and classes.")
        bodyDiv:Add(headDiv)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("Libraries such as the Math library, the DataFrame library, and the Form library allow you to create different types of projects and there are many more. These libraries all use a particular mechanism to organize themselves, called <strong>classes</strong>. In this lesson, you are going to learn how to create your own custom class and identify all the different parts.")

        AddHeading(section_overview, "Goals", 3)
        section_overview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Learn what distinguishes a class from an object")
        goalList:AddListItem("Learn how to use "+dq+"class"+dq+" blocks to create a class")
        goalList:AddListItem("Create actions within your class")
        goalList:AddListItem("Learn about how to create your own documentation")
        section_overview:Add(goalList)

        bodyDiv:Add(section_overview)

        Section section_warmUp
        section_warmUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_warmUp)
        AddHeading(section_warmUp, "Warm up", 2)
        
        section_warmUp:AddParagraph("A common metaphor in computer science is to think of actions as verbs and classes as nouns. What do you think this metaphor might mean or imply?")

        AddHeading(section_warmUp, "Vocabulary", 3)

        section_warmUp:AddParagraph("You will be learning about the following vocabulary words: ")
        
        WebTable table = AddWebTable("Vocabulary")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Term")
        tableHeaderArray:Add("Definition") 
   

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Class")
        rubricText1:Add("An organizing structure that can contain variables and actions that acts as a blueprint for custom data types to use in a program.") 
   
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("Members")
        rubricText2:Add("Variables and functions contained within a class.") 
  
        tableBody:Add(AddTableBodyRow(rubricText2))
    
        table:Add(tableBody)
        section_warmUp:Add(table)

        section_warmUp:AddParagraph("")
        AddHeading(section_warmUp, "Code", 3)

        section_warmUp:AddParagraph("You will be using the following new pieces of code: ")


        WebTable tableCode = AddWebTable("New Code to Learn")
        TableBody tableBodyCode = AddTableBody()
        
        Array<text> tableHeaderArrayCode
        tableHeaderArrayCode:Add("Quorum Code")
        tableHeaderArrayCode:Add("Code Example") 
        tableHeaderArrayCode:Add("Explanation")

        TableHeader theadCode = AddTableHeaderRow(tableHeaderArrayCode)
        tableCode:Add(theadCode)  

        Array<text> rubricText4
        rubricText4:Add("class MyClass
end
")
        rubricText4:Add("class FishClass
end
")
        rubricText4:Add("Creates a class inside of Quorum") 
   
        tableBodyCode:Add(AddTableBodyRow(rubricText4))

        Array<text> rubricText5
        rubricText5:Add("// Comment")
        rubricText5:Add("// This explains something!")
        rubricText5:Add("A single line of text that is ignored by the computer, but can be used to describe the code.") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricText5))

    
        Array<text> rubricTextIf
        rubricTextIf:Add("/* Comment */")
        rubricTextIf:Add("/* This explains something, even on multiple lines! */")
        rubricTextIf:Add("Multiple lines of text between asterisks that are ignored by the computer, but can be used to describe the code.") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricTextIf))

        tableCode:Add(tableBodyCode)
        section_warmUp:Add(tableCode)
        section_warmUp:AddParagraph("")

        AddHeading(section_warmUp, "CSTA Standards", 3)
        Paragraph cstaPara
        cstaPara:AddText("This lesson covers the following ")
        Link linkStandards = cstaPara:AddLink("standards", "https://csteachers.org/k12standards/interactive/")
        cstaPara:AddText(":")
        linkStandards:SetTarget(linkStandards:newTab)
        section_warmUp:Add(cstaPara)

        UnorderedList standards
        standards:AddClassAttribute("list-disc list-outside pl-8")
        standards:AddListItem("<strong>3A-AP-17</strong>: Decompose problems into smaller components through systematic analysis, using constructs such as procedures, modules, and/or objects. ")
        standards:AddListItem("<strong>3A-AP-15</strong>: Justify the selection of specific control structures when tradeoffs involve implementation, readability, and program performance, and explain the benefits and drawbacks of choices made.")
        standards:AddListItem("<strong>3A-AP-18</strong>: Create artifacts by using procedures within a program, combinations of data and procedures, or independent but interrelated programs. ")
        section_warmUp:Add(standards)
  
        Section section_explore
        section_explore:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_explore)
        AddHeading(section_explore, "Explore", 2)
        
        section_explore:AddParagraph("You have already used a number of different objects. While you have not had to worry about how these objects work so far, under the hood objects are made using code just like the programs you have been writing. At their core, objects are collections of variables and actions. You have already learned about actions in depth, and now it is time to learn how they can be brought together into objects using classes.")
        
        AddHeading(section_explore, "Object-Oriented Programming", 3)
        section_explore:AddParagraph("Objects are used to break up complex programs into much more manageable pieces that work together to solve a complex program. The concept of using objects to make programming easier is formally known as Object-Oriented Programming. When considering object-oriented programming, there are two related, but distinct, concepts to keep in mind. These are classes and objects.")
        AddHeading(section_explore, "Classes and Objects", 4)

        section_explore:AddParagraph("A class is like a schematic or a recipe that describes a data type. You can think of it like a blueprint for a house. It can describe the shape and the dimensions of the building, and it can describe the way you use the rooms. At the end of the day, though, you need to actually build the house before you can use it.")
        section_explore:AddParagraph("You have already seen a little bit of what classes are like. They are a block that can contain variables and actions. Below is an example of a class. This particular example, the RoboDuck class, contains a single variable and a single action.")

        Image image1 = section_explore:AddImage("/media/Blocks/ActionsClasses/RoboDuck.png","A screenshot of a Quorum program. It reads:

class RoboDuck
integer quackCount = 0
action Quack
quackCount = quackCount + 1
say ''QUACK #'' + quackCount
end
end")
        image1:AddAttribute("data-zoom","")
        image1:AddClassAttribute("object-contain max-w-96 max-h-96 overflow-hidden rounded")

        section_explore:AddParagraph("While a roboduck is silly, it is ok to be silly. Classes are just a way to organize code. An object is a specific piece of data. If a class is a schematic for a house, an object is a specific house made with that schematic. You could use the same schematic to build other identical houses.")
        section_explore:AddParagraph("The example below shows how you can make an object. This looks similar to other objects you have created before, but this time there is no “use” statement. That is because you are not retrieving a class from a library, but instead, you have written it yourself in your program.")

        Image image2 = section_explore:AddImage("/media/Blocks/ActionsClasses/CallRobo.png","A screenshot of Quorum Studio. On the left side, the project tree shows a project called TheDuckFactory. The source code folder contains two files, Main.quorum and RoboDuck.quorum. On the right side, the Main.quorum file is displayed. The code reads:
RoboDuck freddyDuck
RoboDuck sammyDuck
freddyDuck:Quack()
freddyDuck:Quack()
sammyDuck:Quack()")
        image2:AddAttribute("data-zoom","")
        image2:AddClassAttribute("object-contain max-w-96 max-h-80 overflow-hidden rounded")

        section_explore:AddParagraph("In this program, two RoboDuck objects are made, and stored in the variables "+dq+"freddyDuck"+dq+" and "+dq+"sammyDuck."+dq+" When this program is run, it says the following:")
        section_explore:Add(preformatter:GeneratePreformattedCode("QUACK #1
QUACK #2
QUACK #1
"))

        section_explore:AddParagraph("Examine the previous example again, where the RoboDuck class is created. Each RoboDuck contains a counter variable that increases each time the "+dq+"Quack"+dq+" action is called. Each object contains a copy of the variables and actions that are declared in the class. Even though both objects share the same class, they store their own information. At the end of this program, Freddy duck's counter is at 2, while Sammy's is at 1.
")      
        section_explore:AddParagraph("The values inside of a class are known as its <strong>members</strong>. These come in two basic varieties:")


        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        list:AddListItem("<strong>Member Variables</strong>: Local variables that are unique to a class and represent the data or characteristics of the objects created from the class.")
        list:AddListItem("<strong>Member Actions</strong>: The actions that an object created from the class can perform.")
        section_explore:Add(list)

        AddHeading(section_explore, "Creating a Class", 3)
        section_explore:AddParagraph("To create a class, you can use the “class” block found in the Actions tab of the palette. ")

        Image image3 = section_explore:AddImage("/media/Blocks/ActionsClasses/ClassBlocks.png","This is an image of the palette containing a class block and a use block.")
        image3:AddText("This is an image of the palette containing a class block and a use block.")
        image3:AddAttribute("data-zoom","")
        image3:AddClassAttribute("object-contain max-w-96 max-h-52 overflow-hidden rounded")

        section_explore:AddParagraph("Class blocks have a few rules that they must follow:")
        UnorderedList list1
        list1:AddClassAttribute("list-disc list-outside pl-8")
        list1:AddListItem("A Quorum file can not have more than one class block. Not all programming languages have this restriction, but Quorum does")
        list1:AddListItem("If a file has a class block, the only code that can go outside of it are use blocks. All other code must go inside the class block.")
        list1:AddListItem("Use blocks must go above a class, not below it")
        section_explore:Add(list1)

        section_explore:AddParagraph("Because of these restrictions, if you are using classes, you will need more than one file in your program. To add a file to your program, you can right click the "+dq+"SourceCode"+dq+" folder of the project in the tree on the left side. Alternatively, you can select "+dq+"New File"+dq+" from the File menu (hotkey Command + Shift + N on Mac, or Control + Shift + N on Windows).")

        Image image4 = section_explore:AddImage("/media/Blocks/ActionsClasses/AddNewFile.png","This shows the source code folder highlighted with the context menu open. In it, New File, New Folder, Delete, and Find are in the menu. New File is highlighted. ")
        image4:AddText("This shows the source code folder highlighted with the context menu open. In it, New File, New Folder, Delete, and Find are in the menu. New File is highlighted. ")
        image4:AddAttribute("data-zoom","")
        image4:AddClassAttribute("object-contain max-w-96 max-h-96 overflow-hidden rounded")

        AddHeading(section_explore,"Documentation", 3)
        section_explore:AddParagraph("In programming, documentation is commonly written directly into the code using <strong>comments</strong>. Comments are lines of text that are explicitly ignored by the computer. They serve no purpose to the code, but they can be very helpful to the humans reading it. ")
        section_explore:AddParagraph("There are two different ways to comment code: ")
        UnorderedList list2
        list2:AddClassAttribute("list-disc list-outside pl-8")
        list2:AddListItem("Single Line Comments")
        list2:AddListItem("Multi-line Comments")
        section_explore:Add(list2)

        section_explore:AddParagraph("The format for single line comments would be:")
        section_explore:Add(preformatter:GeneratePreformattedCode("// This is a comment for one line of code.
// This is a comment for another line of code."))
        section_explore:AddParagraph("The format for multi-line comments would be:")
        section_explore:Add(preformatter:GeneratePreformattedCode("/*
In between these two asterisks, you can write comments about your code. This could be one line, or ten, or as many as you want.
*/"))
        section_explore:AddParagraph("There is no right or wrong way to use the different formats, but generally you can use single line comments to describe the little details and multi-line comments to give a general overview. The example below shows the EvenChecker class, which can check if an integer is even or odd. It has comments explaining the action’s purpose and how it works.")
        Image image5 = section_explore:AddImage("/media/Blocks/ActionsClasses/EvenChecker.png","This shows blocks for the following code:

class EvenChecker
   action IsEven(integer value) returns boolean

      boolean result = (value mod 2 = 0)
      return result
   end
end

There are other additional lengthy comments in the image, which describe what mod is and state that the action returns true if even and false if odd.")
        image5:AddText("This shows blocks for the following code:

class EvenChecker
   action IsEven(integer value) returns boolean

      boolean result = (value mod 2 = 0)
      return result
   end
end

There are other additional lengthy comments in the image, which describe what mod is and state that the action returns true if even and false if odd.")
        image5:AddAttribute("data-zoom","")
        image5:AddClassAttribute("object-contain max-w-96 max-h-96 overflow-hidden rounded")


        AddHeading(section_explore,"Make Your Classes Make Sense",4)
        section_explore:AddParagraph("When creating your own class, consider writing documentation. The big benefit is that comments written on top of a class (block or text), automatically show up in the palette, which lets others observe your documentation. Here are some rather general tips about writing documentation:")
        UnorderedList list3
        list3:AddClassAttribute("list-disc list-outside pl-8")
        list3:AddListItem("<strong>Start with a Clear Description</strong>: Begin with a concise description of what the class does and its purpose within the application.")
        list3:AddListItem("<strong>Document the Intent</strong>: Explain not just what the class does, but why it exists. What problem does it solve? How is it intended to be used?")
        list3:AddListItem("<strong>Be Consistent</strong>: Use a consistent style and format throughout your documentation. This makes it easier to read and understand.")
        list3:AddListItem("<strong>Use Descriptive Names</strong>: Choose clear and descriptive names for methods and variables, which can often reduce the need for extensive documentation.")
        list3:AddListItem("<strong>Include Usage Examples (if needed)</strong>: Especially when the code must be shared with others, it can be helpful to know not only what the purpose of a class or action is, but what code using it might look like.")
        section_explore:Add(list3)


         Section section_engage
        section_engage:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_engage)
        AddHeading(section_engage, "Engage", 2)

        section_engage:AddParagraph("Welcome back to Bogmort’s School of Mathcraft and Calculatry. As you continue your wizardly education, you will need more than just your brain to remember your spells. What you need is a spellbook. Your "+dq+"spellbook"+dq+" will be a custom class that you will store all your actions inside.")
        AddHeading(section_engage, "Directions", 3)
        section_engage:AddParagraph("You will be creating a custom class that represents a spellbook. ")
        section_engage:AddParagraph("Inside your Spellbook class, include the previous spells you have made in your first wizardry session:")
        UnorderedList list4
        list4:AddClassAttribute("list-disc list-outside pl-8")
        list4:AddListItem("<i>Incremento</i>: Add 1 to a value.")
        list4:AddListItem("<i>Subtractio</i>: Subtract 3 from a value.")
        list4:AddListItem("<i>Multifour</i>: Multiply a value by 4.")
        list4:AddListItem("<i>Dividenadd</i>: Divide a value by 2, then add 10.")
        section_engage:Add(list4)

        section_engage:AddParagraph("Then, add 3 additional actions to keep inside your spellbook:")
        UnorderedList list5
        list5:AddClassAttribute("list-disc list-outside pl-8")
        list5:AddListItem("<i>Incredimento</i>: Add 10 to a value.")
        list5:AddListItem("<i>Twomos</i>: Add two to a value, then multiply by 2.")
        list5:AddListItem("<i>Addava Subtrava</i>: If the value is even, add 3 to it. If the value is odd, subtract 1 from it.")
        section_engage:Add(list5)

        section_engage:AddParagraph("Once you have finished creating your spellbook, it is time to use it. This time, you will be cultivating mathdrakes. These scientific plants are very particular, and must be harvested under very precise conditions. Each mathdrake begins as an infinitesimally small sprout that is, somehow, 0 cm tall. You will use your spells to grow the mathdrakes to the optimal size before you harvest them.")

         Image image6 = section_engage:AddImage("/media/Blocks/ActionsClasses/Mandrake.png","A large tree in the woods with many roots and branches")
        image6:AddText("A large tree in the woods with many roots and branches")
        image6:AddAttribute("data-zoom","")
        image6:AddClassAttribute("object-contain max-w-96 max-h-96 overflow-hidden rounded")
        section_engage:AddText("<small><center><a href=" + dq + "https://unsplash.com/photos/macro-shot-of-brown-tree-GEyXGTY2e9w" + dq + ">Brown Tree by Brandon Green</a></center></small>")

        section_engage:AddParagraph("To harvest the mathdrakes: ")
        UnorderedList list6
        list6:AddClassAttribute("list-disc list-outside pl-8")
        list6:AddListItem("Create a class for your spellbook.")
        list6:AddListItem("Add all 7 spells as actions to your spellbook. Like last time, each action should also announce the spell’s name using an output or say statement.")
        list6:AddListItem("Add a comment for your class, and one for each of your actions in your spellbook.")
        list6:AddListItem("In your main file, create a spellbook object, along with an integer variable for each of the mandrakes.")
        list6:AddListItem("In your main file, use your spellbook and its spells to grow the four mandrakes to their ideal sizes for harvesting. Output the growth of each mathdrake when you are done to verify your results.")
        section_engage:Add(list6)


        section_engage:AddParagraph("<strong>Mathdrake 1</strong>: Harvest the mathdrake when it reaches 60 cm.")
        section_engage:AddParagraph("<strong>Mathdrake 2</strong>: Using each of your new spells exactly once, harvest the mathdrake at 17 cm.")
        section_engage:AddParagraph("<strong>Mathdrake 3</strong>: Harvest when the mathdrake is greater than 100 cm but less than 140 cm tall, while casting spells 5 times or fewer.")
        section_engage:AddParagraph("<strong>Mathdrake 4</strong>: Harvest the mathdrake when it reaches 49 cm, while casting spells 8 times or fewer.")

        AddHeading(section_engage,"Wrap up",3)
        section_engage:AddParagraph("Take a look at your code and reread the documentation you have written for your Spellbook. Does your documentation make sense? Do you think if you gave your program to someone else, they could understand your code using your comments?")
        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to create classes in Quorum"
    end

    action GetSummaryName returns text
        return "Actions and Classes, Part 2"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Actions and Classes, Part 2"
    end

    action GetShortDescription returns text
        return "how to create classes in Quorum"
    end

    action GetLinkName returns text
        return "Actions and Classes Part 2"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/blocks/ActionsAndClassesP2.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Blocks"
    end
end
