use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image
use Libraries.Web.Page.Bold

class BlocksLoops is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Learn Loops - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour 8: Loops", 1)

        headDiv:AddText("This lesson will teach you how to use loops with blocks in Quorum.")
        bodyDiv:Add(headDiv)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("Perhaps one of the most common aspects of programming is automation. Computers often excel not just at fast number crunching, but also repetition and decision making."
+ " In this lesson, you will explore how to tell computers to repeat themselves. There are many reasons for using repetition. It is a hallmark and fundamental skill in computer science. ")
        
        AddHeading(section_overview, "Goals", 3)
        section_overview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Learn how to use " + dq + "repeat ... times" + dq + " statements.")
        goalList:AddListItem("Learn about " + dq + "repeat while" + dq + " and " + dq + "repeat until" + dq + " statements.")
        goalList:AddListItem("Discuss how " + dq + "scope" + dq + " impacts variables defined inside loops.")
        section_overview:Add(goalList)

        bodyDiv:Add(section_overview)

        Section section_warmUp
        section_warmUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_warmUp)
        AddHeading(section_warmUp, "Warm up", 2)
        
        section_warmUp:AddParagraph("One of the big benefits of computers is that they can do repetitive tasks that would be tedious or difficult for humans to do. What are some examples"
+ " of repetitive tasks that technology can handle? What do you think the code for those kinds of tasks might look like?")
        
        AddHeading(section_warmUp, "Vocabulary", 3)
        section_warmUp:AddParagraph("You will be learning about the following vocabulary words: ")

        WebTable table = AddWebTable("Vocabulary")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Term")
        tableHeaderArray:Add("Definition") 
   

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Loop")
        rubricText1:Add("A structure that contains code to be run repeatedly. It runs a certain number of times, or so long as a condition is met.") 
   
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("Multiple Line Block")
        rubricText2:Add("A block that takes up more than one line in the editor, and has multiple parts that can be moved and adjusted.")
  
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("Scope")
        rubricText3:Add("The area where a variable exists and can be used.") 
     
        tableBody:Add(AddTableBodyRow(rubricText3))
    
        table:Add(tableBody)
        section_warmUp:Add(table)

        section_warmUp:AddParagraph("")
        AddHeading(section_warmUp, "Code", 3)
        section_warmUp:AddParagraph("You will be using the following new pieces of code: ")


        WebTable tableCode = AddWebTable("New Code to Learn")
        TableBody tableBodyCode = AddTableBody()
        
        Array<text> tableHeaderArrayCode
        tableHeaderArrayCode:Add("Quorum Code")
        tableHeaderArrayCode:Add("Code Example") 
        tableHeaderArrayCode:Add("Explanation")

        TableHeader theadCode = AddTableHeaderRow(tableHeaderArrayCode)
        tableCode:Add(theadCode)  

        text indent = "&nbsp;&nbsp;&nbsp;&nbsp;"

        Array<text> codeRow1
        codeRow1:Add("repeat <code>INTEGER</code> times")
        codeRow1:Add("repeat 10 times<br/>"
+ indent + "output " + dq + "hello!" + dq + "<br/>"
+ "end")
        codeRow1:Add("Runs the code inside the repeat block <code>INTEGER</code> times.") 
   
        tableBodyCode:Add(AddTableBodyRow(codeRow1))

        Array<text> codeRow2
        codeRow2:Add("repeat while <code>BOOLEAN</code>")
        codeRow2:Add("repeat while i < 10<br/>"
+ indent + "output " + dq + "hello!" + dq + "<br/>"
+ indent + "i = i + 1<br/>"
+ "end")
        codeRow2:Add("Repeatedly runs the code inside the repeat block as long as the <code>BOOLEAN</code> value is true.") 

        tableBodyCode:Add(AddTableBodyRow(codeRow2))
    
        Array<text> codeRow3
        codeRow3:Add("repeat until <code>BOOLEAN</code>")
        codeRow3:Add("repeat until i < 10<br/>"
+ indent + "output " + dq + "hello!" + dq + "<br/>"
+ indent + "i = i + 1<br/>"
+ "end")
        codeRow3:Add("Repeatedly runs the code inside the repeat block as long as the <code>BOOLEAN</code> value is true.") 

        tableBodyCode:Add(AddTableBodyRow(codeRow3))

        Array<text> codeRow4
        codeRow4:Add("end")
        codeRow4:Add("repeat 8 times<br/>"
+ indent + "output " + dq + "hello!" + dq + "<br/>"
+ "end")
        codeRow4:Add("Marks the end of a multiple line block, like repeat blocks. Repeat blocks run code between the start of the block and the end.") 

        tableBodyCode:Add(AddTableBodyRow(codeRow4))


        tableCode:Add(tableBodyCode)
        section_warmUp:Add(tableCode)
        section_warmUp:AddParagraph("")

        AddHeading(section_warmUp, "CSTA Standards", 3)
        Paragraph cstaPara
        cstaPara:AddText("This lesson covers the following ")
        Link linkStandards = cstaPara:AddLink("standards", "https://csteachers.org/k12standards/interactive/")
        cstaPara:AddText(":")
        linkStandards:SetTarget(linkStandards:newTab)
        section_warmUp:Add(cstaPara)

        UnorderedList standards
        standards:AddClassAttribute("list-disc list-outside pl-8")
        standards:AddListItem("<strong>3A-DA-12</strong>:  Create computational models that represent the relationships among different elements of data collected from a phenomenon or process.")
        section_warmUp:Add(standards)
  
        Section sectionExplore
        sectionExplore:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionExplore)
        AddHeading(sectionExplore, "Explore", 2)
        
        sectionExplore:AddParagraph("When making programs, you often want to run code multiple times. Sometimes it is more convenient to run the same code over and over again "
+ "instead of writing out duplicate code by hand. In other cases, you do not know ahead of time how many times the code will need to run. ")
        sectionExplore:AddParagraph("In computer science, you can run code multiple times by using " + dq + "repeat" + dq + " blocks. While the exact terms vary across the discipline, sometimes these structures are known as <strong>loops.</strong>")

        Image i1 = sectionExplore:AddImage("/media/Blocks/Loops/LoopFlowchart.png", "A flowchart showing how loops work. It begins at the Start Loop step, goes to Initialize Expression, and then to Test Condition. Here, it has two branches: the first is IF TEST = TRUE. This branch goes to Execute Action, then ncrement, then returns to Test Condition. The second branch is IF TEST = FALSE, which goes to Stop Loop.")
        i1:AddAttribute("data-zoom","")
        
        AddHeading(sectionExplore, "The " + dq + "Control" + dq + " Category", 3)
        sectionExplore:AddParagraph("In Quorum Studio, the block palette has a category labeled " + dq + "Control." + dq + " In this category, there are three different kinds of loops: the " + dq + "repeat times" + dq
+ " block, the " + dq + "repeat while" + dq + " block, and the " + dq + "repeat until" + dq + " block.")

       Image i2 = sectionExplore:AddImage("/media/Blocks/Loops/RepeatTypes.png", "A snippet from Quorum Studio, showcasing the three kinds of repeat blocks in the block palette. In order, they show:
repeat 1 times
end

repeat until true
end

repeat while false
end")
i2:AddClassAttribute("object-contain max-w-96 max-h-96")
i2:AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("The navigation pane on the left side of Quorum Studio has several tabs, including both the project view and the block palette. To reach the control category using only the keyboard in Quorum Studio, "
+ "you will need to first to focus the palette, then use the hotkeys to change categories. The table below shows the hotkeys for moving through both the navigation tabs and the block palette with the keyboard on Windows and Mac.")

        WebTable hotkeyTable = AddWebTable("Hotkeys for Tab and Category Navigation")
        TableBody hotkeyTableBody = AddTableBody()
        
        Array<text> hotkeyTableHeaderArray
        hotkeyTableHeaderArray:Add("Action")
        hotkeyTableHeaderArray:Add("Keys") 
        hotkeyTableHeaderArray:Add("Description") 
   

        TableHeader hotkeyHead = AddTableHeaderRow(hotkeyTableHeaderArray)
        hotkeyTable:Add(hotkeyHead)  

        Array<text> hotkeys1
        hotkeys1:Add("Focus Navigation Pane")
        hotkeys1:Add("CTRL + 1 (Window) or CMD + 1 (Mac)") 
        hotkeys1:Add("Focus the navigation pane. This pane has tabs for the project tree as well as the block palette.")
        hotkeyTableBody:Add(AddTableBodyRow(hotkeys1))

        Array<text> hotkeys2
        hotkeys2:Add("Go to Next Tab/Category") 
        hotkeys2:Add("CTRL + Tab (Windows) or CTRL + ] (Mac)")
        hotkeys2:Add("If you are in the block palette, go to the next block category. If not, go to the next tab in the navigation pane.")
        hotkeyTableBody:Add(AddTableBodyRow(hotkeys2))

        Array<text> hotkeys3
        hotkeys3:Add("Go to Previous Tab/Category") 
        hotkeys3:Add("SHIFT + CONTROL + Tab (Windows) or CTRL + [ (Mac)")
        hotkeys3:Add("If you are in the block palette, go to the previous block category. If not, go to the previous tab in the navigation pane.")
        hotkeyTableBody:Add(AddTableBodyRow(hotkeys3))

        Array<text> hotkeys4
        hotkeys4:Add("(From Block Palette) Focus Navigation Pane Tabs") 
        hotkeys4:Add("ESCAPE x2")
        hotkeys4:Add("While in the block palette, pressing escape once will focus the categories, so they can be tabbed through. Pressing escape twice will focus the navigation tabs so they can be tabbed through instead.")
        hotkeyTableBody:Add(AddTableBodyRow(hotkeys4))
    
        hotkeyTable:Add(hotkeyTableBody)
        sectionExplore:Add(hotkeyTable)        

        
        sectionExplore:AddParagraph("Repeat blocks are a little different from the other kinds of blocks you have used so far. Previously, each block you have used has been a single line of code. These blocks have two parts on two different lines.")
        sectionExplore:AddParagraph("These are <strong>multiple line blocks</strong>. Besides taking up more than one line, the important part of these blocks is that other blocks can go inside of them, between the first"
+ " and the last line. The picture below shows an example of a " + dq + "repeat times" + dq + " block with something inside of it. In computer science, this is often called a <strong>scope</strong>.")

       Image i3 = sectionExplore:AddImage("/media/Blocks/Loops/RepeatTimesExample.png", "A snippet of a Quorum Studio program. It spans three lines. The first and third line are visually connected, and the second line is inside the other two. The lines read:
repeat 2 times
output ''Hello world!''
end")
i3:AddClassAttribute("object-contain max-w-96 max-h-96")
i3:AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("The " + dq + "repeat times" + dq + " block is the simplest repeat block. It will run any code inside of it as many times as requested. In the program above, for example, the block will run its code "
+ "two times. In contrast, the " + dq + "repeat while" + dq + " block does not run a fixed number of times. Instead, it checks a boolean condition. If the condition is true, it runs the code. The example below shows some code using a "
+ " " + dq + "repeat while" + dq + " block.")

        Image i4 = sectionExplore:AddImage("/media/Blocks/Loops/RepeatWhileExample.png", "A Quorum Studio program with 5 lines. The second and fourth line are a single repeat while block. The text of the program is:
integer value = 1
repeat while value < 3
value = value + 1
end
output value")
i4:AddClassAttribute("object-contain max-w-96 max-h-96")
i4:AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("In this example, you start with a variable called " + dq + "value" + dq + " that starts at 1. When the code reaches the " + dq + "repeat while" + dq + " block, "
+ "it checks the condition. Because 1 is less than 3, the code executes, and increases the value by 1. Then it checks the condition again.")
        sectionExplore:AddParagraph("Since 2 is still less than 3, it runs again, and the value increases by 1 up to 3. When it checks the condition this time, 3 is not less than 3, so it stops. It then outputs the value, which is 3.")
        sectionExplore:AddParagraph("The " + dq + "repeat until" + dq + " block is the opposite of the " + dq + "repeat while" + dq + " block. The " + dq + "repeat while" + dq + " block will run if the condition is true, but the "
+ dq + "repeat until" + dq + " block runs if the condition is false. Otherwise, they work the same way. It is always possible to phrase the condition in a way that either block will work. Which one to use is personal preference.")

        AddHeading(sectionExplore, "Scope in a Loop", 3)
        sectionExplore:AddParagraph("When working with multiple line blocks, you can move blocks in or out of the multiple line block by dragging them with the mouse, or by using cut and paste with the keyboard."
+ " Try moving the output block just above the " + dq + "end" + dq + " using either the mouse or cut and paste. The picture below shows an example.")

        sectionExplore:AddParagraph("When working with multiple line blocks, you can move blocks in or out of the multiple line block by dragging them with the mouse. Alternatively, you can select a block and use cut "
+ "(CTRL + X on Windows or CMD + X on Mac) and paste (CTRL + V on Windows or CMD + V on Mac) with the keyboard. When pasting a block, the cut block will appear directly after the currently selected block.")
        sectionExplore:AddParagraph("Try moving the output block just above the " + dq + "end" + dq + " using either the mouse or cut and paste. The picture below shows an example. ")

        Image i5 = sectionExplore:AddImage("/media/Blocks/Loops/ScopeP1.png", "A 5-line Quorum program. It reads:
integer value = 1
repeat 6 times
value = value * 2
output value
end")
i5:AddClassAttribute("object-contain max-w-96 max-h-96")
i5:AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("Similarly, you can move blocks into the beginning of the repeat block. In fact, so long as the top part of the repeat block remains above the " + dq + "end" + dq
+ " portion, you can arrange code inside and outside of it however you would like -- though the positioning of code will make a difference. Try moving or cutting and pasting the variable so that it is "
+ "now created inside the loop, like in the example below.")

        Image i6 = sectionExplore:AddImage("/media/Blocks/Loops/ScopeP2.png", "A 5-line Quorum program. It reads:
repeat 6 times
integer value = 1
value = value * 2
output value
end")
i6:AddClassAttribute("object-contain max-w-96 max-h-96")
i6:AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("In the example above, the program should now output " + dq + "2" + dq + " six times. Now, move the output back down again, out of the repeat block. It now flashes red, and your program has an error.")

        Image i7 = sectionExplore:AddImage("/media/Blocks/Loops/ScopeP3.png", "A 5-line Quorum program. The last line, the output block, flashes red because it is an error. The program reads:
repeat 6 times
integer value = 1
value = value * 2
end
output value")
i7:AddClassAttribute("object-contain max-w-96 max-h-96")
i7:AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("When a variable is created inside a multiple line block like a " + dq + "repeat" + dq + " block, it only exists inside that block. The output statement is now an error because, "
+ "outside of the repeat statement, there is no variable with that name available. ")
        sectionExplore:AddParagraph("The area that a variable exists in is called its <strong>scope.</strong> In other words, the scope is the part of the program where a variable is allowed to be used. One of the most common "
+ "types of scope you may run into is <strong>local scope.</strong> This occurs when variables are contained within control structures (like " + dq + "repeat" + dq + " blocks) and can only be accessed within that code block."
+ " If you call that variable anywhere else outside the structure, it will result in an error. This is what you saw earlier with the " + dq + "output value" + dq + " statement. Because of this, you must pay careful attention "
+ "to where your variables are being made and used while working with multiple line blocks. ")

        Section sectionEngage
        sectionEngage:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionEngage)
        AddHeading(sectionEngage, "Engage", 2)

        sectionEngage:AddParagraph("Now that you have spent some time learning about loops, it is time to try them yourself. Loops are an important concept in programming. This is also your first time working with "
+ "multiple line blocks. You will start by interpreting the output of some example loops, and then you will make a program from scratch that uses the different types of loops to solve problems.")
        
        AddHeading(sectionEngage, "Directions", 3)
        sectionEngage:AddParagraph("One morning you suddenly wake up and you immediately hear the sound of clanking metal. Weird... you look in your bathroom to discover a small robot. They seem to have gotten stuck "
+ "reading the " + dq + "Rinse, Lather, Repeat" + dq + " instructions on the back of your shampoo bottle over and over. ")

        Image robotImage = sectionEngage:AddImage("/media/Blocks/Loops/Robot.png", "An image of a small toy robot.")
        robotImage:AddAttribute("data-zoom","")
        robotImage:AddClassAttribute("object-contain max-w-96 max-h-96")
        sectionEngage:AddText("<small><center><a href=" + dq + "https://unsplash.com/photos/blue-plastic-robot-toy-R4WCbazrD1g" + dq + ">A little Robot by Rock'n Roll Monkey</a></center></small>")

        sectionEngage:AddParagraph("While neither you or the robot know where they came from, they seem harmless, aside from some acute memory issues. You figure that some "
+ "mental exercises should jog their memory -- or at least keep them from getting stuck reading your shampoo bottle.")

        AddHeading(sectionEngage, "Part 1: Identifying Loop Output", 4)
        sectionEngage:AddParagraph("In this section, you will step your new robot friend through some examples of loops. Look at each one carefully and determine what the output of the program is. Please write the "
+ "entire output as if you are running the program. If you need to recreate the loop to see the output, feel free to do so.")

        sectionEngage:AddText("<br>")
        sectionEngage:AddParagraph("<i>1. What is the output of this program using a " + dq + "repeat times" + dq + " block?</i>")
        Image i8 = sectionEngage:AddImage("/media/Blocks/Loops/PizzaTime.png", "A 3-line Quorum Studio program. It reads:
repeat 3 times
output ''Pizza Time''
end")
        i8:AddClassAttribute("object-contain max-w-96 max-h-96")
        i8:AddAttribute("data-zoom","")

        sectionEngage:AddText("<br>")
        sectionEngage:AddParagraph("<i>2. What is the output of this program using a " + dq + "repeat while" + dq + " block?</i>")
        Image i9 = sectionEngage:AddImage("/media/Blocks/Loops/EngageQ2.png", "A 5-line Quorum Studio program. It reads:
integer counter = 10
repeat while counter > 3
counter = counter - 2
output counter
end")
i9:AddClassAttribute("object-contain max-w-96 max-h-96 rounded overflow-hidden")
i9:AddAttribute("data-zoom","")
     
        sectionEngage:AddText("<br>")
        sectionEngage:AddParagraph("<i>3. What happens in this program where the condition is never met?</i>")
        Image i10 = sectionEngage:AddImage("/media/Blocks/Loops/NoFreeTime.png", "A 5-line Quorum Studio program. It reads:
integer freeTime = 0
repeat while freeTime >= 30
output ''Time for a break!''
freeTime = freeTime - 30
end")
i10:AddClassAttribute("object-contain max-w-96 max-h-96 rounded overflow-hidden")
i10:AddAttribute("data-zoom","")

        sectionEngage:AddText("<br>")
        sectionEngage:AddParagraph("<i>4. What happens in this program where the condition is always true?</i>")
        Image i11 = sectionEngage:AddImage("/media/Blocks/Loops/TimeLoop.png", "A 3-line Quorum Studio program. It reads:
repeat while true
output ''Help I'm trapped in a time loop''
end")
i11:AddClassAttribute("object-contain max-w-96 max-h-96 rounded overflow-hidden")
i11:AddAttribute("data-zoom","")

        AddHeading(sectionEngage, "Part 2: Creating Loops", 4)
        sectionEngage:AddParagraph("In this next part, you will practice creating loops on your own to solve some repetitive tasks.")
        sectionEngage:AddParagraph("Your robot friend has 4 oddly specific requests they would like help solving using loops:")

        OrderedList puzzleList
        puzzleList:AddClassAttribute("list-disc list-outside pl-8")
        puzzleList:AddListItem("Output every number between 1 and 8.")
        puzzleList:AddListItem("Output every odd number between 1 and 16.")
        puzzleList:AddListItem("Calculate 2 to the 11th power.")
        puzzleList:AddListItem("Compute 9! (9 * 8 * 7 * ... * 2 * 1)")
        sectionEngage:Add(puzzleList)

        sectionEngage:AddParagraph("Use each of the three types of loops at least once while solving the requests.")

        AddHeading(sectionEngage, "Wrap up", 3)
        sectionEngage:AddParagraph("Take a few minutes to consider the three kinds of loops. While it might seem on the surface important to teach or understand all three,"
+ " in practice there is significant overlap between them. In fact, you can write any program using only " + dq + "repeat while" + dq + " or " + dq + "repeat until" + dq + " loops."
+ " Given that, what are the pros and cons of teaching students all three right when they are first learning the concept?")



        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to use loops and multiple line blocks in Quorum"
    end

    action GetSummaryName returns text
        return "Loops with Blocks"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Loops"
    end

    action GetShortDescription returns text
        return "how to use loop blocks in Quorum"
    end

    action GetLinkName returns text
        return "Loops"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/blocks/BlocksLoops.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Blocks"
    end
end
