use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image
use Libraries.Web.Page.Bold

class BooBooManagementP1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Boo Boo Management, Part 1 - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour 5: Boo Boo Management - Part 1", 1)

        headDiv:AddText("Learn about errors and how to fix them.")
        bodyDiv:Add(headDiv)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("Perhaps one of the most common actions in computer programming is making mistakes. They are common and everyone makes them. In this lesson, you will learn about mistakes, which kinds are the most common, and what happens when you inevitably make them. You will then intentionally make various kinds of errors or mistakes and learn how to adjust your code to fix them in blocks.")
        
        AddHeading(section_overview, "Goals", 3)
        section_overview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Learn about the different kinds of errors.")
        goalList:AddListItem("Learn about the kinds of common mistakes that students make as they are learning.")
        section_overview:Add(goalList)

        bodyDiv:Add(section_overview)

        Section section_warmUp
        section_warmUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_warmUp)
        AddHeading(section_warmUp, "Warm Up", 2)
        
        section_warmUp:AddParagraph("Imagine people at different age ranges. There are young students in K-2 that are emerging readers. Students from 3-5, 6-8, or 9-12, all learning computer science as they go. There are also students in undergraduate through doctoral programs and professional programmers with potentially decades of experience. What kind of mistakes do you think each of these groups might commonly make and why?")
        

        AddHeading(section_warmUp, "Vocabulary", 3)
        section_warmUp:AddParagraph("You will be learning about the following vocabulary words: ")
        WebTable table = AddWebTable("Vocabulary")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Term")
        tableHeaderArray:Add("Definition") 
   

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Compiler Error")
        rubricText1:Add("A mistake in a computer program where the programming language can automatically detect a problem exists.") 
   
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("Runtime Error")
        rubricText2:Add("A mistake in a computer program where the program correctly compiles, but when running it has a problem (e.g., it crashes or calculates incorrectly).") 
  
        tableBody:Add(AddTableBodyRow(rubricText2))
    
        table:Add(tableBody)
        section_warmUp:Add(table)

        section_warmUp:AddParagraph("")
        AddHeading(section_warmUp, "Code", 3)
        section_warmUp:AddParagraph("There is no new code for this lesson.")

        AddHeading(section_warmUp, "CSTA Standards", 3)
        Paragraph cstaPara
        cstaPara:AddText("This lesson covers the following ")
        Link linkStandards = cstaPara:AddLink("standards", "https://csteachers.org/k12standards/interactive/")
        cstaPara:AddText(":")
        linkStandards:SetTarget(linkStandards:newTab)
        section_warmUp:Add(cstaPara)

        UnorderedList standards
        standards:AddClassAttribute("list-disc list-outside pl-8")
        standards:AddListItem("<strong>3A-CS-03</strong>: Develop guidelines that convey systematic troubleshooting strategies that others can use to identify and fix errors.")
        section_warmUp:Add(standards)
  
        Section sectionExplore
        sectionExplore:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionExplore)
        AddHeading(sectionExplore, "Explore", 2)
        
        sectionExplore:AddParagraph("Computer programming languages can take practice to learn and an important part of that practice is learning about mistakes. When people think of the idea of a mistake, it often has a bad connotation. Perhaps a person feels subjectively bad for making one, or is frustrated in trying to fix it.")
        sectionExplore:AddParagraph("In practice, however, while certain kinds of mistakes are harder to fix in programming than others, the good news is that humans are quite predictable in the kinds of mistakes they make and many have common solutions. Some are so commonplace that the computer can take a good reasonable guess about how to fix them. As a programmer, recognizing these mistakes and understanding why these errors occur will strengthen your problem solving skills and help you learn to invent more complex programs.")
        sectionExplore:AddParagraph("While the word " + dq + "mistake" + dq + " is common in English, in computer science you typically break down the concept into types of errors. The most common two kinds are <strong>compiler errors</strong> and <strong>runtime errors</strong>. Consider an example of both.")
        
        Section sectionCompilerError
        sectionCompilerError:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionCompilerError)
        AddHeading(sectionCompilerError, "Compiler Errors", 3)

        sectionCompilerError:AddParagraph("Programming languages are complicated bits of technology. You might think of them as turning human-like language into 1s and 0s, which in a literal sense they do, but in practice these languages are made for people. The basic problem though is this: what words or symbols are precise enough for a machine to understand, yet understandable enough for a human to know how to teach that machine what to do?")
        sectionCompilerError:AddParagraph("This question leads to a natural mismatch between humans and machines. The problem is made worse by the fact that machines have to process this text, interpret it, then reorganize it to be converted into those 1s and 0s. This is essentially what is known as a compiler. Along the way, many kinds of errors can happen. One such category of errors, called compiler errors, are those errors that can happen before a program ever runs. ")
        sectionCompilerError:AddParagraph("Intuitively, you might think compiler errors are frustrating, because they stop your program from running. In practice, however, compiler errors are your friends. They represent a situation where the computer can calculate that, with certainty, your program may never run correctly anyway and they can tell you that in advance. This can make the problem much easier to find and you are often not so lucky.")

        Section sectionCommonCompilerErrors
        sectionCommonCompilerErrors:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionCommonCompilerErrors)
        AddHeading(sectionCommonCompilerErrors, "Common Compiler Errors", 3)

        sectionCommonCompilerErrors:AddParagraph("There are many kinds of compiler errors and one easy way to understand them is to think through which ones are common. It is tempting to just guess, but academic research has shown that the issue really needs evidence to understand. One recent overview of what is known was conducted by Becker et. al [1] and an overview of which errors are common amongst students was conducted by Altadmri and Brown [2]. One easy way to think about them is that, if you have errors in your code, to fix the first and ignore the rest [3].")
        sectionCommonCompilerErrors:AddParagraph("Consider an example with an output statement:")
        sectionCommonCompilerErrors:Add(preformatter:GeneratePreformattedCode("output " + dq + "Hello "))
        sectionCommonCompilerErrors:AddParagraph("First, notice that the system is being asked to output the word " + dq + "Hello" + dq + ", except that text requires a double quote on the left and the right hand side of the system. In this case, the right hand side is missing. One of the most common errors is mismatched braces [1, 2]. This is not exactly like, but is analogous to, this situation. In this system, typing this as raw text would then give the following:")

        sectionCommonCompilerErrors:AddImage("/media/Blocks/Boo Boo Management/ErrorOutput.png", "This image shows the block editor with an error in it. The left hand side shows the message ''Errors: Found '' which is not a valid expression. An expression is something like 10, the name of a variable, or text.'' The right hand side shows the faulty line of code outlined in red. The screen reader typically provides this as a spelling error on supported operating systems and screen readers."):AddAttribute("data-zoom","")

        sectionCommonCompilerErrors:AddParagraph("Part of the problem is that computer programming languages are not always terribly good at predicting what a human did wrong. In this case, the error message is stating that the word Hello with only a single left double quote is not a valid expression, which is true but confusing. How to make such messages better, and for whom, is an active line of research in computer science.")
        sectionCommonCompilerErrors:AddParagraph("Besides matching, the academic literature shows students make many mistakes commonly and thus you should expect to make them too. The authors of this text still do. These include errors like [2]:")

        WebTable errorTable = AddWebTable("Common Errors")
        TableBody errorTableBody = AddTableBody()
        
        Array<text> errorTableHeaderArray
        errorTableHeaderArray:Add("Error Type")
        errorTableHeaderArray:Add("Approximately what the Issue is") 
   

        TableHeader errorHeader = AddTableHeaderRow(errorTableHeaderArray)
        errorTable:Add(errorHeader)  

        Array<text> errorRow1
        errorRow1:Add("Mismatched Brace")
        errorRow1:Add("When an item in the language requires a human to match things left and right, they often miss one.") 
   
        errorTableBody:Add(AddTableBodyRow(errorRow1))

        Array<text> errorRow2
        errorRow2:Add("Calling functions incorrectly")
        errorRow2:Add("When using math functions, it is easy to accidentally send the function the wrong information.") 
  
        errorTableBody:Add(AddTableBodyRow(errorRow2))

        Array<text> errorRow3
        errorRow3:Add("Functions that give things back")
        errorRow3:Add("Some math functions give things back, like calculating a Sine function, Power, and when you write these it is easy to accidentally forget to give the answer back.") 
   
        errorTableBody:Add(AddTableBodyRow(errorRow3))

        Array<text> errorRow4
        errorRow4:Add("Equality Operators")
        errorRow4:Add("Some programming languages use two equal signs instead of one (== vs =) to ask the computer if two things are equal. Quorum does not work this way, but this is a common error in other languages (e.g., Java).") 
  
        errorTableBody:Add(AddTableBodyRow(errorRow4))
    
        errorTable:Add(errorTableBody)
        sectionCommonCompilerErrors:Add(errorTable)

        sectionCommonCompilerErrors:AddParagraph("Even in block languages, it is a common misconception that no errors can be made. The errors are just shown differently and constrained in different ways. Further, in some cases the language is constrained to the point that, while it is true some errors are impossible, many kinds of programs cannot be written.")
        sectionCommonCompilerErrors:AddParagraph("")

        Paragraph reference1
        reference1:AddText("<small><strong>[1]</strong> Brett A. Becker, Paul Denny, Raymond Pettit, Durell Bouchard, Dennis J. Bouvier, Brian Harrington, Amir Kamil, Amey Karkare, Chris McDonald, Peter-Michael Osera, Janice L. Pearce, and James Prather. 2019."
+ " Compiler Error Messages Considered Unhelpful: The Landscape of Text-Based Programming Error Message Research. In 2019 ITiCSE Working Group Reports (ITiCSE-WGR '19), July 15-17, 2019, Aberdeen, Scotland UK. ACM, New York, NY, USA, 34 pages. ")
        reference1:AddLink("https://doi.org/10.1145/3344429.3372508", "https://doi.org/10.1145/3344429.3372508")
        reference1:AddText("</small>")
        sectionCommonCompilerErrors:Add(reference1)

        Paragraph reference2
        reference2:AddText("<small><strong>[2]</strong> Amjad Altadmri and Neil C.C. Brown. 2015. 37 Million Compilations: Investigating Novice Programming Mistakes in Large-Scale Student Data. In SIGCSE '15. ACM, 522--527.</small>")
        sectionCommonCompilerErrors:Add(reference2)

        Paragraph reference3
        reference3:AddText("<small><strong>[3]</strong> Brett A. Becker, Cormac Murray, Tianyi Tao, Changheng Song, Robert McCartney, and Kate Sanders. 2018. Fix the First, Ignore the Rest: Dealing with Multiple Compiler Error Messages."
+ " In Proceedings of the 49th ACM Technical Symposium on Computer Science Education (SIGCSE '18). Association for Computing Machinery, New York, NY, USA, 634-639. ")
        reference3:AddLink("https://doi.org/10.1145/3159450.3159453", "https://doi.org/10.1145/3159450.3159453")
        reference3:AddText("</small>")
        sectionCommonCompilerErrors:Add(reference3)


        Section sectionRuntimeErrors
        sectionRuntimeErrors:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionRuntimeErrors)
        AddHeading(sectionRuntimeErrors, "Runtime Errors", 3)

        sectionRuntimeErrors:AddParagraph("Sometimes errors can happen while the code <em>seems</em> to be working perfectly fine. Runtime errors are different from compiler errors. "
+ "Instead of a program failing before it runs at all, the computer has identified that the source code is valid. It cannot, and in fact it is impossible to, know for sure your program is correct, "
+ "but it can at least know that the source code looks like a valid source in the programming language.")
        sectionRuntimeErrors:AddParagraph("The problem is, not all source code gives useful results. Consider an example, which might look as so:")

        sectionRuntimeErrors:Add(preformatter:GeneratePreformattedCode("output 5 / 0"))

        sectionRuntimeErrors:AddParagraph("This code, whether typed as raw text or placed into a block, is valid and correct. The computer programming language sees that it is a valid line of code. "
+ "Whether the code is so-called blocks or text is not relevant. The error would be the same. The problem is, what does a computer program do if you divide by zero? The answer is simple: it crashes. "
+ "Depending on the programming language, it might give no information at all, write some cryptic numbers, or give a weird looking error, like so:")

        sectionRuntimeErrors:Add(preformatter:GeneratePreformattedCode("Error: class java.lang.ArithmeticException, / by zero" + cr
+ "    file: Main.quorum,  class: Main,  action: Main,  line: 1"))

        sectionRuntimeErrors:AddParagraph("The details of what this means are out of scope, but the bottom line is that when a computer program is running, it crashed on line one of Main. When it crashed, "
+ "it had a specific kind of reason for crashing, which is that the computer tried to divide by zero and it cannot do that. There are many kinds of runtime errors, for all sorts of situations, and you can "
+ "even define your own. However, the crucial point to understand is that errors can happen before a program runs (compiler errors) and during a program's run (runtime error). Runtime errors might also be "
+ "called " + dq + "bugs." + dq)


        Section sectionEngage
        sectionEngage:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionEngage)
        AddHeading(sectionEngage, "Engage", 2)

        Paragraph engageParagraph
        engageParagraph:AddText("For this lesson, you are going to participate in the Crazy Error Contest. This activity, modeled very loosely and philosophically on the ")
        engageParagraph:AddLink("International Obfuscated C contest", "https://www.ioccc.org/")
        engageParagraph:AddText(", is to try and come up with the most absurd error message you can.")
        sectionEngage:Add(engageParagraph)


        Section sectionDirections
        sectionDirections:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionDirections)
        AddHeading(sectionDirections, "Directions", 3)

        sectionDirections:AddParagraph("Computers today have an imperfect relationship with the errors they produce. The basic problem is that humans can put really anything inside of a computer program "
+ "and computers cannot know their intent. Humans may not even know their own intent. It is important to remember while you are coding, the computer will be interpreting anything you type into a literal "
+ "sense so it is important to produce code in a methodical manner.")
        sectionDirections:AddParagraph("Sometimes what might look like subtle differences in a program may even produce an error message that does not logically make sense given the code. Thus, for this "
+ "activity, you will be living the dream to practice getting a feel for how things work: try to break things.")
        sectionDirections:AddParagraph("This activity is intended to be light hearted, but serves an important purpose: making mistakes and errors in your code is common and important when it comes to "
+ "learning how to program. Part of that is that some feel anxiety around making errors and this exercise may help you understand that this is not necessary. You really can get used to the types of strange "
+ "things computers say. A second consideration is that this exercise can let you practice making errors in a systematic way to help you observe what the computer does and when. Remember that even the most "
+ "experienced programmers often continue to make silly mistakes and that is perfectly fine.")
        sectionDirections:AddParagraph("Past this, in terms of what is known about errors in the Quorum language specifically, consider a few facts:")

        UnorderedList engageList
        engageList:AddClassAttribute("list-disc list-outside pl-8")
        engageList:AddListItem("Compiler Error messages in Quorum are written at the 8th grade reading level across the entire programming language. This does not, however, mean they are easy to understand. Quorum cannot always predict, for every wrong program, what is wrong.")
        engageList:AddListItem("Runtime error messages in Quorum are tricky and depends on how you are running Quorum and where.")
        engageList:AddListItem("The kinds of errors humans make in Quorum are different from other programming languages. Basically, people make some kinds of errors much more commonly than others [4].")
        sectionDirections:Add(engageList)

        sectionDirections:AddParagraph("To provide an example, the <strong>most common error</strong> in Quorum (5.7% of errors) for students is trying to output a variable name. However, either the variable is "
+ "misspelled, they are using a variable that does not exist, or there is a capitalization error.")
        sectionDirections:AddParagraph("The <strong>second most common error</strong> is accidentally combining items while trying to output them (4.9%). For example, to output a variable named " + dq + "a" + dq +
" you would write " + dq + "output a" + dq + " but the user might type " + dq + "outputa" + dq + " or another phrase. Now consider an example error, which happens to be the <strong>third most common kind</strong> (4.7%):")

        sectionDirections:Add(preformatter:GeneratePreformattedCode("Fish tacos"))

        sectionDirections:AddParagraph("This produces the error, " + dq + "I could not locate a type named Fish. Did you forget a use statement?" + dq + " This makes sense, sort of, if you assume Fish is something real in the "
+ "language (sadly, it is not). However, if you add one single character to the end, a semicolon (there are no semicolons in Quorum), you would have the following code:")

        sectionDirections:Add(preformatter:GeneratePreformattedCode("Fish tacos;"))

        sectionDirections:AddParagraph("Yet, with that single change, the error moves to, " + dq + "The symbol ';' is not valid. Please remove it." + dq + " This is true, but misleading in that removing the symbol would fix one problem,"
+ " but not make the program correct. ")
        sectionDirections:AddParagraph("The problem arises in the " + dq + "Fish" + dq + " type because it does not exist in the language. What you are accidentally creating is an object of " + dq + "Fish" + dq + " type. "
+ "Recall when you created the " + dq + "Math" + dq + " object there were no errors. This is because there existed a library (Libraries.Compute.Math) that allowed for that variable to exist. If you tried to do the same "
+ "thing with " + dq + "Fish" + dq + ", there was no library to support it, thus creating a runtime error. ")

        
        Section task1
        task1:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(task1)
        AddHeading(task1, "Task 1: Wrong Answers Only", 4)

        task1:AddParagraph("Come up with a set of alternative programs with a partner. You can do this through any mechanism you wish. You can type in random characters or symbols, "
+ "make up fake names, mismatch anything, or really just tinker and play. Have fun. The goal for this first task is to purposely break your program and recognize compiler errors in the system.")
        task1:AddParagraph("An example of this would be the following line of code:")

        task1:AddImage("/media/Blocks/Boo Boo Management/BadHello.png", "A program with a single block, which is flashing red because it is an error. It reads ''helllooooooo!!''"):AddAttribute("data-zoom","")
        task1:AddParagraph("Where the following error that would occur would be:")
        task1:Add(preformatter:GeneratePreformattedCode("I found 2 errors. Line 1, The symbol '!' is not valid. Please remove it Press command 3 to go to the errors tab  or command G to go to the line in the editor."))


        Section task2
        task2:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(task2)
        AddHeading(task2, "Task 2: Top 3", 4)

        task2:AddParagraph("Agree with your partner on what you perceive to be the top 3 worst, or funniest, errors you can get the system to produce. Then write down:")

        UnorderedList task2List
        task2List:AddClassAttribute("list-disc list-outside pl-8")
        task2List:AddListItem("The code you used to produce the error.")
        task2List:AddListItem("The message the system says.")
        task2List:AddListItem("What you think might be a better error message if you could change it.")
        task2:Add(task2List)

        task2:AddParagraph("For the message you suggest, try to imagine the limits of the computer. How would it know how to generate the message you suggest? "
+ "Do you think it would be possible to generate such a message, and why or why not? What is the actual cause of the problem compared to what the real message or what your new one is?")


        Section task3
        task3:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(task3)
        AddHeading(task3, "Task 3: Pick a Winner", 4)

        task3:AddParagraph("Once all groups have selected their 3 answers, share out the top choice from each group. Pick a winner, or loser depending on your point of view, across the group"
+ " as a whole. The criterion for how to pick this is entirely subjective and the winner does not matter. Subjectively, the most outrageous error message seems best, but the point is to have "
+ "fun with it and keep it lighthearted while learning about errors in a stress free way.")

        task3:AddParagraph("")
        task3:AddParagraph("<small><strong>[4]</strong> Patrick Daleiden. 2020. Toward Productivity Improvements in Programming Languages through Behavioral Analytics. Ph.D. Dissertation. University of Nevada, Las Vegas. Las Vegas, NV.</strong></small>")


        Section wrapUp
        wrapUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(wrapUp)
        AddHeading(wrapUp, "Wrap up", 3)

        wrapUp:AddParagraph("Write down the criterion for your top three messages so they can be shared with the group after you have completed your tinkering. Provide the winner fish tacos, if that is their thing or yours.")


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about errors and how to make them"
    end

    action GetSummaryName returns text
        return "Boo Boo Management"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Boo Boo Management"
    end

    action GetShortDescription returns text
        return "types of errors in Quorum"
    end

    action GetLinkName returns text
        return "Boo Boo Management Part 1"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/blocks/BooBooManagementP1.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Blocks"
    end
end
