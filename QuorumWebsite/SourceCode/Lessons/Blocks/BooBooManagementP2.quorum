use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image
use Libraries.Web.Page.Bold

class BooBooManagementP2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Boo Boo Management, Part 2 - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour 12: Boo Boo Management, Part 2 - Debugger Boogaloo", 1)

        headDiv:AddText("This lesson is to teach you about the debugger in Quorum.")
        bodyDiv:Add(headDiv)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("Errors happen during the programming process. They are normal and expected. Not having any errors in a program is less normal than having them. One kind that was already discussed is the <i>compiler error</i>, which occurs when code does not follow the rules of the programming language and cannot be run. These kinds of errors can be found automatically by the computer. There is a different, trickier, kind of error that can be much harder to find: the <i>runtime error</i>. In this lesson, you are going to learn how to use a debugger to find and try to fix runtime errors. To do this, you will learn about debugging, then engage in a stump the teacher exercise.
")

        AddHeading(section_overview, "Goals", 3)
        section_overview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Learn about the Observe, Hypothesize, Modify, and Test cycle")
        goalList:AddListItem("Learn how to use the debugger to step through programs")
        goalList:AddListItem("Practice with a stump the teacher exercise")
        section_overview:Add(goalList)

        bodyDiv:Add(section_overview)

        Section section_warmUp
        section_warmUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_warmUp)
        AddHeading(section_warmUp, "Warm up", 2)
        
        section_warmUp:AddParagraph("Think about your experiences with real-world software. Have you encountered problems or bugs while using software? What were they? What kinds of problems have been the most or the least troublesome for you in practice?")
       
        AddHeading(section_warmUp, "Vocabulary", 3)

        section_warmUp:AddParagraph("You will be learning about the following vocabulary words: ")
        
        WebTable table = AddWebTable("Vocabulary")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Term")
        tableHeaderArray:Add("Definition") 
   

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Compiler Error")
        rubricText1:Add("A mistake in a computer program where the programming language can automatically detect a problem exists") 
   
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("Runtime Error")
        rubricText2:Add("A mistake in a computer program where the program correctly compiles, but when running it has a problem (e.g., it crashes, calculates incorrectly)") 
  
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("Debugger")
        rubricText3:Add("A tool used to try to find problems with the runtime behavior of a computer program.") 
     
        tableBody:Add(AddTableBodyRow(rubricText3))

         Array<text> rubricText4
        rubricText4:Add("Logging")
        rubricText4:Add("The act of tracking information about how a program runs.") 
     
        tableBody:Add(AddTableBodyRow(rubricText4))
    
        table:Add(tableBody)
        section_warmUp:Add(table)

        section_warmUp:AddParagraph("")
        AddHeading(section_warmUp, "Code", 3)

        section_warmUp:AddParagraph("This lesson builds on debugging skills, but does not add new code constructs.")

        

        AddHeading(section_warmUp, "CSTA Standards", 3)
        Paragraph cstaPara
        cstaPara:AddText("This lesson covers the following ")
        Link linkStandards = cstaPara:AddLink("standards", "https://csteachers.org/k12standards/interactive/")
        cstaPara:AddText(": ")
        linkStandards:SetTarget(linkStandards:newTab)
        section_warmUp:Add(cstaPara)

        UnorderedList standards
        standards:AddClassAttribute("list-disc list-outside pl-8")
        standards:AddListItem("<strong>3A-AP-13</strong>: Create prototypes that use algorithms to solve computational problems by leveraging prior student knowledge and personal interests.")
        standards:AddListItem("<strong>3A-AP-16</strong>: Design and iteratively develop computational artifacts for practical intent, personal expression, or to address a societal issue by using events to initiate instructions.")
        standards:AddListItem("<strong>3A-CS-03</strong>: Develop guidelines that convey systematic troubleshooting strategies that others can use to identify and fix errors. ")
        standards:AddListItem("<strong>3A-AP-22</strong>: Design and develop computational artifacts working in team roles using collaborative tools. ")
        standards:AddListItem("<strong>3A-AP-23</strong>: Document design decisions using text, graphics, presentations, and/or demonstrations in the development of complex programs.")
        section_warmUp:Add(standards)
  
        Section section_explore
        section_explore:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_explore)
        AddHeading(section_explore, "Explore", 2)
        
        section_explore:AddParagraph("Computer scientists have a difficult job. In theory, they create software for everyone, for every type of automated task. They have to be usable by everyone, regardless of age, expertise, gender, disability, or other factors. Given how common computer software is, it is inevitable that even real software may have mistakes in it. In practice, the software you use every day does not have <strong>compiler errors</strong> (at least, not by the time it reaches you). If software is on an app store, for example, it is guaranteed to never have a compiler error. If it did, it could never make it to an app store in the first place. However, software in practice can have problems and these always, without exception, come in the form of <i>runtime errors</i>. 
")
        AddHeading(section_explore, "Runtime Errors Again", 3)
        section_explore:AddParagraph("The basic idea of a <strong>runtime error</strong>, as described previously, is that a program does something unexpected. In some cases, it may crash, while in others it may give the wrong answer or have some kind of strange behavior. A runtime error can be anything from an incorrect calculation to something looking or sounding out of place. The wide variety of problems, or bugs, can make it difficult to find.
")      
        section_explore:AddParagraph("With runtime errors: you need a plan. While it is okay to tinker, being organized can help. As an example, Rich et al. [1] have a somewhat historical, but useful and general, lens for especially young students. They suggest you debug in a cycle with the following steps: <strong>Observe, Hypothesize, Modify, and Test</strong>.")
        
        AddHeading(section_explore, "Observe", 4)
        section_explore:AddParagraph("While it sounds simple, your extensive training at Bogmorts notwithstanding, there is no magic with debugging. Some bugs are just hard to find, no matter what you do. For students, you might try something like running a small program and observing what happens. In a professional setting, you might try "+dq+"<strong>logging</strong>"+dq+", the process of recording detailed information about a programâ€™s execution, in order to observe what happened previously. This kind of logging, a form of observation, is very common on a web server and it can be difficult, if not impossible, to debug programs in practice without some kind of logging.")
         
        AddHeading(section_explore, "Hypothesize", 4)
        section_explore:AddParagraph("After observing, the next step in debugging a program is to think through possible causes of a runtime error. This does not have to be a formal process. Even asking yourself a simple question like, "+dq+"Why is this program breaking?"+dq+" or "+dq+"Where do I think this problem is happening?"+dq+" may help think through the problem.")
        AddHeading(section_explore, "Modify", 4)
        section_explore:AddParagraph("Once you have identified possible causes of a runtime error, you have to change the code. Changes can be as small as one character or may involve hundreds of files. How to change the code to fix an error can vary widely and depends on what you are trying to fix.
")
        AddHeading(section_explore, "Test", 4) 
        section_explore:AddParagraph("The last step in the cycle is to test if a modification had the desired effect. Sometimes this can be easy to identify, for example if a program stops crashing. Other times, you may have incorrectly hypothesized what the problem was. For example, perhaps a program is based on the computer's clock and only crashes on Leap Year, but you thought the cause had something to do with holidays. Once you have tested, you may need to start the cycle fresh and try again if the bug is not resolved. ")

        AddHeading(section_explore, "A Practical Guide to Using a Debugger", 3)
        section_explore:AddParagraph("Examine the program below. Similar to one in a previous lesson, it has a divide by zero error")


        Image image1 = section_explore:AddImage("/media/Blocks/Boo Boo Management 2/BrokenProgram.png","This shows an image with the following code:

integer a = 0
output 5 / a

In this case, the left hand side of the palette shows information about the output block, which has the focus.")
        image1:AddText("This shows an image with the following code:

integer a = 0
output 5 / a

In this case, the left hand side of the palette shows information about the output block, which has the focus.")
        image1:AddAttribute("data-zoom","")
        image1:AddClassAttribute("object-contain rounded overflow-hidden")

        section_explore:AddParagraph("This program does not have any compiler errors, which you can verify by running it. While the program runs, it crashes with an error saying it cannot process a number divided by zero. Trying to fix it might involve the following steps:")

        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        list:AddListItem("<strong>Observe</strong>: the program crashes with a rather complicated error message. Unfortunately, when programs crash, the error messages they give out can be extremely difficult to read or understand.")
        list:AddListItem("<strong>Hypothesize</strong>: perhaps if the variable "+dq+"a"+dq+" was not zero, it would not crash.")
        list:AddListItem("<strong>Modify</strong>: change the variable a to 1.")
        list:AddListItem("<strong>Test</strong>: the program no longer crashes. This does not guarantee the program is fixed, but hey it does not crash.")
        section_explore:Add(list)

        section_explore:AddParagraph("Another approach for observing a program is to use the <strong>debugger</strong>. To do so, you first must set a breakpoint, either by clicking on the number line with the mouse at the line you want to stop, or through COMMAND + K on Mac or CTRL + K on Windows. Next, start the debugger, either by clicking the green bug symbol, or by pressing COMMAND + D on Mac or CTRL + D on Windows. The program will start, and then stop at the breakpoint selected. This leads to a program with the following state:")

        Image image2 = section_explore:AddImage("/media/Blocks/Boo Boo Management 2/StopAt1.png","This image shows the same code, except that now on line there is a green line over the line of code")
        image2:AddText("This image shows the same code, except that now on line there is a green line over the line of code")
        image2:AddAttribute("data-zoom","")
        image2:AddClassAttribute("object-contain rounded overflow-hidden")

        section_explore:AddParagraph("Once at a stopping point, you can take several actions, like so:")


        Image imagedebug = section_explore:AddImage("/media/Blocks/Boo Boo Management 2/DebuggerControls.png","This image shows the debugging controls. These are a green bug, start debugger, a red square, stop the debugger. The next five controls are pause, continue, which are two upward lines and two rightward triangles respectively. Finally, there are three arrows, one going to the right, step over, one going down, step into, and one going up, step out.")
        imagedebug:AddText("This image shows the debugging controls. These are a green bug, start debugger, a red square, stop the debugger. The next five controls are pause, continue, which are two upward lines and two rightward triangles respectively. Finally, there are three arrows, one going to the right, step over, one going down, step into, and one going up, step out.")
        imagedebug:AddAttribute("data-zoom","")
        imagedebug:AddClassAttribute("object-contain max-w-96 max-h-96")

        AddHeading(section_explore,"Start Debugger", 4)
        section_explore:AddParagraph("This button is a green bug and starts the debugger. If no breakpoints are set, it will either run forever, if your program runs forever, or stop when your program stops. It is impossible for any computer program to know if your program will run forever or not, a finding made famous by the computer scientist Alan Turing. ")
        AddHeading(section_explore,"Stop Debugger", 4)
        section_explore:AddParagraph("This button is shaped like a red square with rounded corners and stops a program if it is running. ")
        AddHeading(section_explore,"Pause Debugger", 4)
        section_explore:AddParagraph("The pause button looks like two thick vertical lines. If a program is running in the debugger, this button will try to pause the running program. Pause is generally not used much in debugging.")
        AddHeading(section_explore,"Continue", 4)
        section_explore:AddParagraph("The fast forward button looks like two rightward triangles stacked on each other with a vertical line at the end. It tells the debugger to run the program until the next breakpoint. If there is no next breakpoint, it will run forever or stop when your program stops.
")
        AddHeading(section_explore,"Step Over", 4)
        section_explore:AddParagraph("This button is a right arrow. It tells the debugger to jump over one, and only one, line of code.
")
        AddHeading(section_explore,"Step Into", 4)
        section_explore:AddParagraph("This button is a down arrow. It tells the debugger to jump inside of an action if it is applicable. In the case of the previous example, because the line of code is just assigning a value to a variable, it will have the same effect as step over.
")
        AddHeading(section_explore,"Step Out", 4)
        section_explore:AddParagraph("This button is an up arrow. It tells the debugger to jump out of an action. In the previous example, it would jump to the end of the program. 
")
        
        AddHeading(section_explore,"HotKeys", 4)
        section_explore:AddParagraph("The following hotkeys can also be used to access the debugger commands:")

        WebTable tableHK = AddWebTable("Keyboard Commands for the Debugger")
        TableBody tableBodyHK = AddTableBody()
        
        Array<text> tableHeaderArrayHK
        tableHeaderArrayHK:Add("Operation") 
        tableHeaderArrayHK:Add("Command")
   

        TableHeader theadHK = AddTableHeaderRow(tableHeaderArrayHK)
        tableHK:Add(theadHK)  

        Array<text> rubricText5
        rubricText5:Add("Start Debugger")
        rubricText5:Add("COMMAND + D or CTRL + D") 
   
        tableBodyHK:Add(AddTableBodyRow(rubricText5))

        Array<text> rubricText6
        rubricText6:Add("Stop Debugger")
        rubricText6:Add("COMMAND + E or CTRL + E") 
  
        tableBodyHK:Add(AddTableBodyRow(rubricText6))

        Array<text> rubricText7
        rubricText7:Add("Pause Debugger")
        rubricText7:Add("CTRL + F7") 
     
        tableBodyHK:Add(AddTableBodyRow(rubricText7))

         Array<text> rubricText8
        rubricText8:Add("Continue")
        rubricText8:Add("CTRL + F8") 
     
        tableBodyHK:Add(AddTableBodyRow(rubricText8))

         Array<text> rubricText9
        rubricText9:Add("Step Over")
        rubricText9:Add("CTRL + F9") 
     
        tableBodyHK:Add(AddTableBodyRow(rubricText9))

         Array<text> rubricText10
        rubricText10:Add("Step Out")
        rubricText10:Add("CTRL + F11") 
     
        tableBodyHK:Add(AddTableBodyRow(rubricText10))

         Array<text> rubricText11
        rubricText11:Add("Set Breakpoint")
        rubricText11:Add("COMMAND + K or CTRL + K") 
     
        tableBodyHK:Add(AddTableBodyRow(rubricText11))
    
        tableHK:Add(tableBodyHK)
        section_explore:Add(tableHK)

        section_explore:AddParagraph("")
        section_explore:AddParagraph("<small><strong>[1]</strong> Kathryn M. Rich, Carla Strickland, T. Andrew Binkowski, and Diana Franklin. 2019. A K-8 Debugging Learning Trajectory Derived from Research Literature. In Proceedings of the 50th ACM Technical Symposium on Computer Science Education (SIGCSE '19). Association for Computing Machinery, New York, NY, USA, 745â€“751. https://doi.org/10.1145/3287324.3287396</small>")

          Section section_engage
        section_engage:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_engage)
        AddHeading(section_engage, "Engage", 2)

        section_engage:AddParagraph("In this section, you will participate in a game of Stump the Teacher. This idea, originally adapted from Kerslake [2], is to write programs that you believe are correct, intentionally add bugs to them, and then a friend or the instructor thinks out loud while trying to debug them. Be devious. Have fun.")

        AddHeading(section_engage,"Directions",3)
        section_engage:AddParagraph("In the stump the teacher exercise, you will modify the provided example program. Read the next section to learn about the program, then change it to purposefully add bugs to it. Because the example program includes actions and complex conditionals, you might find the debugger helpful for understanding how the program runs.")

        AddHeading(section_engage, "The Sorting Hat Program", 4)
        section_engage:AddParagraph("At Bogmortâ€™s School of Mathcraft and Calculatry, first-year students are placed into houses after their first set of exams. These houses provide a community for each student for the remainder of their education with Bogmortâ€™s. In the past, students were sorted using a supposedly magical hat, but in modern times, you write software.")
        section_engage:AddParagraph("There are four houses at Bogmortâ€™s: Graphingdor, Sinetherin, Ratioclaw, and Hyperbolapuff. Before a student is sorted into a house, their grades are recorded for their Potions, Math, and Flying classes. Based on these grades, students are sorted according to these rules:")

        UnorderedList list1
        list1:AddClassAttribute("list-disc list-outside pl-8")
        list1:AddListItem("If a studentâ€™s Flying grade is higher than their other two grades, they go into <strong>Sinetherin</strong>.")
        list1:AddListItem("Otherwise, if a studentâ€™s Math grade is 90 or higher and their Flying is less than 80, they go into <strong>Ratioclaw</strong>")
        list1:AddListItem("Otherwise, if all three of their grades are 75 or higher, they go into <strong>Graphingdor</strong>.")
        list1:AddListItem("Finally, any remaining students go into <strong>Hyperbolapuff</strong>.")
        section_engage:Add(list1)

        section_engage:AddParagraph("<strong>There is one special exception</strong>: if a studentâ€™s first name begins with "+dq+"H"+dq+" and their last name starts with "+dq+"P"+dq+", they are sorted into <strong>Graphingdor</strong>, according to the schoolâ€™s cheesy and esoteric "+dq+"Chosen One"+dq+" rule.")
        section_engage:AddParagraph("There are several students who are ready to be sorted into houses. The table below shows their names, grades, and expected house.")

         WebTable tableStudents = AddWebTable("Student Information")
        TableBody tableBodyStudents = AddTableBody()
        
        Array<text> tableHeaderArrayStudents
        tableHeaderArrayStudents:Add("Student")
        tableHeaderArrayStudents:Add("Potions") 
        tableHeaderArrayStudents:Add("Math") 
        tableHeaderArrayStudents:Add("Flying") 
        tableHeaderArrayStudents:Add("House") 

        TableHeader theadStudents = AddTableHeaderRow(tableHeaderArrayStudents)
        tableStudents:Add(theadStudents)  

        Array<text> rubricText13
        rubricText13:Add("Craigric Dingery")
        rubricText13:Add("70") 
        rubricText13:Add("59")
        rubricText13:Add("54")
        rubricText13:Add("Hyperbolapuff")
   
        tableBodyStudents:Add(AddTableBodyRow(rubricText13))

        Array<text> rubricText14
        rubricText14:Add("Harmony Grander")
        rubricText14:Add("99")
        rubricText14:Add("100")
        rubricText14:Add("80")
        rubricText14:Add("Graphingdor")
  
        tableBodyStudents:Add(AddTableBodyRow(rubricText14))

        Array<text> rubricText15
        rubricText15:Add("Decco Milford")
        rubricText15:Add("79")
        rubricText15:Add("68")
        rubricText15:Add("90")
        rubricText15:Add("Sinetherin")
     
        tableBodyStudents:Add(AddTableBodyRow(rubricText15))

        Array<text> rubricText16
        rubricText16:Add("Henry Porter")
        rubricText16:Add("50")
        rubricText16:Add("60")
        rubricText16:Add("94")
        rubricText16:Add("Graphingdor") 
     
        tableBodyStudents:Add(AddTableBodyRow(rubricText16))

        Array<text> rubricText17
        rubricText17:Add("Chloe Pang")
        rubricText17:Add("81")
        rubricText17:Add("90")
        rubricText17:Add("76")
        rubricText17:Add("Ratioclaw") 
     
        tableBodyStudents:Add(AddTableBodyRow(rubricText17))

        Array<text> rubricText18
        rubricText18:Add("Ram Westley")
        rubricText18:Add("90")
        rubricText18:Add("75")
        rubricText18:Add("90")
        rubricText18:Add("Graphingdor") 
     
        tableBodyStudents:Add(AddTableBodyRow(rubricText18))
    
        tableStudents:Add(tableBodyStudents)
        section_engage:Add(tableStudents)

        Paragraph dlPara
        dlPara:AddText("Take a few minutes to look at the provided program below. It will evaluate the six students and sort them into their houses. You can also ")
        Link link = dlPara:AddLink("download this program template", "/files/blocks/SortingHat.zip")
        link:AddClassAttribute("underline text-quorum-blue-150")
        dlPara:AddText(".")

        section_engage:Add(dlPara)
        section_engage:AddParagraph("You are also free to copy and paste the code below into Quorum Studio.")

        section_engage:Add(preformatter:GeneratePreformattedCode("class SortingHat
    action Main
        text craigricHouse = SortStudent("+dq+"Craigric"+dq+","+dq+"Dingery"+dq+", 70, 59, 54)
        text harmonyHouse = SortStudent("+dq+"Harmony"+dq+","+dq+"Grander"+dq+", 99, 100, 80)
        text deccoHouse = SortStudent("+dq+"Decco"+dq+","+dq+"Milford"+dq+", 79, 68, 90)
        text henryHouse = SortStudent("+dq+"Henry"+dq+", "+dq+"Porter"+dq+", 50, 60, 94)
        text chloeHouse = SortStudent("+dq+"Chloe"+dq+","+dq+"Pang"+dq+", 81, 90, 76)
   	 text ramHouse = SortStudent("+dq+"Ram"+dq+","+dq+"Westley"+dq+", 90,75, 90)
   	 
        AnnounceHouse("+dq+"Craigric"+dq+", "+dq+"Dingery"+dq+", craigricHouse)
        AnnounceHouse("+dq+"Harmony"+dq+", "+dq+"Grander"+dq+", harmonyHouse)
        AnnounceHouse("+dq+"Decco"+dq+", "+dq+"Milford"+dq+", deccoHouse)
        AnnounceHouse("+dq+"Henry"+dq+", "+dq+"Porter"+dq+", henryHouse)
        AnnounceHouse("+dq+"Chloe"+dq+", "+dq+"Pang"+dq+", chloeHouse)
        AnnounceHouse("+dq+"Ram"+dq+", "+dq+"Westley"+dq+", ramHouse)
    end
    
    action SortStudent(text firstName, text lastName, integer potionsGrade, integer mathGrade, integer flyingGrade) returns text
        text house = "+dq+""+dq+"
        if firstName:StartsWith("+dq+"H"+dq+") and lastName:StartsWith("+dq+"P"+dq+")
            house = "+dq+"GRAPHINGDOR"+dq+"
        else
            if flyingGrade > potionsGrade and flyingGrade > mathGrade
                house = "+dq+"SINETHERIN"+dq+"
            elseif mathGrade >= 90 and flyingGrade < 80
                house = "+dq+"RATIOCLAW"+dq+"
            elseif potionsGrade >= 75 and mathGrade >= 75 and flyingGrade >= 75
                house = "+dq+"GRAPHINGDOR"+dq+"
            else
                house = "+dq+"HYPERBOLAPUFF"+dq+"
            end
        end
        return house
    end
    
    action AnnounceHouse(text firstName, text lastName, text house)
        output "+dq+"I hereby place "+dq+" + firstName + "+dq+" "+dq+" + lastName + "+dq+" into... "+dq+" + house + "+dq+"!"+dq+"
    end
end
"))

    AddHeading(section_engage,"Break Your Program",4)
    section_engage:AddParagraph("You do not have to use this program. You can also write your own, find one online, or whatever works for you. Once you have read through the program, break it. You may add any kind of error you would like, including both compiler errors or runtime errors. You could break the code so it does not compile, or you could purposely make it crash when it is run. You could tweak the conditions so students are sorted into the wrong houses. While the goal is to stump the teacher, the more crucial goal is to have some fun with debugging.
")
    section_engage:AddParagraph("Once you have broken your code, write a sentence or two secretly to document how you broke it and the fix, but do not tell the teacher. You will then pass your code off to a teacher or friend to fix.
")
    AddHeading(section_engage,"Talk Aloud",4)

    section_engage:AddParagraph("If done in a class setting, select one or more projects to try and stump the teacher. If there is more than one teacher, friend, or expert, then be creative on the strategy that works best for your situation. For example, you might have two experts debugging different groups separately or hold a competition for the hardest bug to fix. ")
    section_engage:AddParagraph("
As the teacher tries to fix a bug, they should talk out loud and describe the process they are going through, whether formal or not. If they forget, or stop to think, others in the room should politely prod, or perhaps humorously taunt, the teacher to state their thoughts out loud. The purpose is for the teacher to share the process live with students to help them learn effective (or not) strategies.
")
    AddHeading(section_engage,"Wrap up",3)
    section_engage:AddParagraph("Complete the three steps for the exercise. If time allows, have a full group reflection on the strategies that helped the most or the least.
")

    section_engage:AddParagraph("<strong><small>[2]</strong> Chris Kerslake. 2024. Stump-the-Teacher: Using Student-generated Examples during Explicit Debugging Instruction. In Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 1 (SIGCSE 2024). Association for Computing Machinery, New York, NY, USA, 653â€“658. https://doi.org/10.1145/3626252.3630934</small>")

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to use debugger in Quorum"
    end

    action GetSummaryName returns text
        return "Boo Boo Management Part 2"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Boo Boo Management Part 2"
    end

    action GetShortDescription returns text
        return "how to use the debugger in Quorum"
    end

    action GetLinkName returns text
        return "Boo Boo Management Part 2"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/blocks/BooBooManagementP2.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Blocks"
    end
end
