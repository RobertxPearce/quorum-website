use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image
use Libraries.Web.Page.Bold

class DataScienceP1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Data Science, Part 1: Working with Data - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour 6: Data Science, Part 1 - Working with Data", 1)

        headDiv:AddText("This lesson will teach you about the basics of working with data in Quorum.")
        bodyDiv:Add(headDiv)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("Computer science is not just a thing you learn, but a practical skill that can be applied to many facets of everyday life. "
+ "One of those facets is learning about and understanding data. Data is everywhere, from medical studies that teach you about your health, evidence on public policy,"
+ " and even data in sports or how people watch television. In this lesson, you will learn about the budding field of data science and how you can use scaffolded "
+ "block programming to use and understand data.")
        
        AddHeading(section_overview, "Goals", 3)
        section_overview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Learn about comma-separated value (CSV) files.")
        goalList:AddListItem("Learn about the internal computer representation of a spreadsheet: the DataFrame.")
        goalList:AddListItem("Tinker with the actions in DataFrame and explore the operations that can be used.")
        section_overview:Add(goalList)

        bodyDiv:Add(section_overview)

        Section sectionWarmUp
        sectionWarmUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionWarmUp)
        AddHeading(sectionWarmUp, "Warm up", 2)
        
        sectionWarmUp:AddParagraph("At its core, data science is the art and science of extracting meaningful insights from raw data. It combines techniques from "
+ "statistics, computer science, and domain knowledge to make sense of complex datasets. Whether it is analyzing customer behavior, optimizing business processes, "
+ "or predicting future trends, data science empowers organizations to unlock the value hidden within their data.")
        sectionWarmUp:AddParagraph("As data science's role in society has grown in importance, how do you think it has impacted these fields?")

        UnorderedList warmUpList
        warmUpList:AddClassAttribute("list-disc list-outside pl-8")
        warmUpList:AddListItem("Healthcare")
        warmUpList:AddListItem("Education")
        warmUpList:AddListItem("Finance")
        sectionWarmUp:Add(warmUpList)
        
        WebTable table = AddWebTable("Vocabulary")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Term")
        tableHeaderArray:Add("Definition") 
   

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Data")
        rubricText1:Add("A collection of values that convey information, discussion, and calculation.") 
   
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("Data Science")
        rubricText2:Add("The study of organizing and analyzing massive amounts of data to make meaningful and data-driven decisions.") 
  
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("Tidy Data")
        rubricText3:Add("A method used to keep data in a consistent format for analysis. The three properties for Tidy Data are: "
+ "variables must be in columns, observations must be in rows, and individual cells must represent only one value.") 

        tableBody:Add(AddTableBodyRow(rubricText3))

        Array<text> rubricText4
        rubricText4:Add("Comma-Separated Value (CSV) File")
        rubricText4:Add("A text file that uses commas to separate values and new lines to separate records.") 
     
        tableBody:Add(AddTableBodyRow(rubricText4))
    
        table:Add(tableBody)
        sectionWarmUp:Add(table)

        sectionWarmUp:AddParagraph("")

        WebTable tableCode = AddWebTable("New Code to Learn")
        TableBody tableBodyCode = AddTableBody()
        
        Array<text> tableHeaderArrayCode
        tableHeaderArrayCode:Add("Quorum Code")
        tableHeaderArrayCode:Add("Code Example") 
        tableHeaderArrayCode:Add("Explanation")

        TableHeader theadCode = AddTableHeaderRow(tableHeaderArrayCode)
        tableCode:Add(theadCode)  

        Array<text> codeEntry1
        codeEntry1:Add("use LIBRARY_NAME")
        codeEntry1:Add("use Libraries.Compute.Statistics.DataFrame")
        codeEntry1:Add("A use statement lets you use a type of Object in your program. In this case, you are using the DataFrame object.") 
   
        tableBodyCode:Add(AddTableBodyRow(codeEntry1))

        Array<text> codeEntry2
        codeEntry2:Add("DataFrame NAME")
        codeEntry2:Add("DataFrame frame")
        codeEntry2:Add("A variable declaration that makes a new DataFrame. Unlike primitive variables, DataFrame variables don't need the " + dq + "=" + dq + " sign.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry2))
    
        Array<text> codeEntry3
        codeEntry3:Add("NAME:Load(FILE_NAME)")
        codeEntry3:Add("frame:Load(" + dq + "data/Dogs.csv"+ dq +")")
        codeEntry3:Add("Loads the CSV file from your computer onto Quorum Studio. The file should exist in a path that the system can identify such as within the project folder.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry3))

        Array<text> codeEntry4
        codeEntry4:Add("NAME:AddSelectedColumn(COLUMN_INDEX)")
        codeEntry4:Add("frame:AddSelectedColumn(3)")
        codeEntry4:Add("Adds a column via index into the DataFrame object.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry4))

        Array<text> codeEntry5
        codeEntry5:Add("NAME:AddSelectedColumnRange(INDEX_1, INDEX_2)")
        codeEntry5:Add("frame:AddSelectedColumnRange(3,6)")
        codeEntry5:Add("Adds a range of columns via index into the DataFrame object.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry5))

        Array<text> codeEntry6
        codeEntry6:Add("NAME:ToText()")
        codeEntry6:Add("frame:ToText()")
        codeEntry6:Add("Outputs the entire loaded file into the console.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry6))

        Array<text> codeEntry7
        codeEntry7:Add("NAME:Mean()")
        codeEntry7:Add("frame:Mean()")
        codeEntry7:Add("Calculates the mean of a selected column of a DataFrame.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry7))

        Array<text> codeEntry8
        codeEntry8:Add("NAME:Median()")
        codeEntry8:Add("frame:Median()")
        codeEntry8:Add("Calculates the median of a selected column of a DataFrame.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry8))

        Array<text> codeEntry9
        codeEntry9:Add("NAME:StandardDeviation()")
        codeEntry9:Add("frame:StandardDeviation()")
        codeEntry9:Add("Calculates the Standard Deviation of a selected column of a DataFrame.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry9))

        Array<text> codeEntry10
        codeEntry10:Add("NAME:Variance()")
        codeEntry10:Add("frame:Variance()")
        codeEntry10:Add("Calculates the Variance of a selected column of a DataFrame.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry10))

        Array<text> codeEntry11
        codeEntry11:Add("NAME:Kurtosis()")
        codeEntry11:Add("frame:Kurtosis()")
        codeEntry11:Add("Calculates the Kurtosis of a selected column of a DataFrame.") 
  
        tableBodyCode:Add(AddTableBodyRow(codeEntry11))


        tableCode:Add(tableBodyCode)
        sectionWarmUp:Add(tableCode)
        sectionWarmUp:AddParagraph("")

        AddHeading(sectionWarmUp, "CSTA Standards", 3)
        Paragraph cstaPara
        cstaPara:AddText("This lesson covers the following ")
        Link linkStandards = cstaPara:AddLink("standards", "https://csteachers.org/k12standards/interactive/")
        cstaPara:AddText(":")
        linkStandards:SetTarget(linkStandards:newTab)
        sectionWarmUp:Add(cstaPara)

        UnorderedList standards1
        standards1:AddListItem("<strong>3A-DA-10</strong>: Evaluate the tradeoffs in how data elements are organized and where data is stored. ")
        standards1:AddListItem("<strong>3A-DA-12</strong>: Create computational models that represent the relationships among different elements of data collected from a phenomenon or process.")
        
        standards1:AddClassAttribute("list-disc list-outside pl-8")
        sectionWarmUp:Add(standards1)
  

        Section sectionExplore
        sectionExplore:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionExplore)
        AddHeading(sectionExplore, "Explore", 2)
        
        sectionExplore:AddParagraph("<strong>Data science</strong> is a budding and relatively young field that takes elements from computer science and statistics as part of its overall foundation. "
+ "In some sense, data science is like computer science in the sense that you often program statistics formulas and visualizations. In some sense it is like statistics in the sense "
+ "that it requires a rather formal and complicated understanding of probabilities and equations to get right. As of the time of this writing, there are no unified and agreed upon "
+ "standards for what data science really is, or what should be taught, although many groups are putting on their thinking caps.")
        
        sectionExplore:AddParagraph("While learning about data science is a big and complicated topic, this lesson will give you practice in exploring some of the basics. These include "
+ "some programming with the concept of a DataFrame, a strange concept called <strong>Tidy Data</strong>, and in the next lesson accessible visualizations. Before you can do anything in data science, however, you need to learn to load data.")

        AddHeading(sectionExplore, "Loading Data using Comma Separated Value (CSV) Files", 3)

        sectionExplore:AddParagraph("The term <strong>Comma Separated Value (CSV)</strong> is literal. While computer science often names things somewhat poorly, in this case the name of the file is what "
+ "it sounds like: data separated by a comma. You can make these by hand, but it is much easier to use Excel, Google Sheets, Numbers, or any number of other applications to do so.")

        sectionExplore:AddParagraph("This is an example of what a CSV may look like:")

        sectionExplore:Add(preformatter:GeneratePreformattedCode("daniel, seattle, purple, rocky road" + cr
+ "brandon, las vegas, blue, vanilla" + cr
+ "brianna, san francisco, black, oreo" + cr
+ "rebecca, reno, gold, chocolate" + cr
+ "kristine, washington dc, lilac, birthday cake"))

        sectionExplore:AddParagraph("This CSV example has 5 rows and 4 columns, with each entry separated by commas. The contents of this data are arbitrary, however it is important to "
+ "recognize what a common CSV file may look like. When you think of columns and rows in this context, notice that names like " + dq + "kristine" + dq + " or " + dq + "rebecca" + dq
+ " are text, not numbers. This fact is important and can be used by any language that supports data science to mean many sorts of things.")

        AddHeading(sectionExplore, "Tidy Data", 3)

        sectionExplore:AddParagraph("The concept of Tidy Data is used when trying to create consistent formats of data for analysis. Having readable and consistent data is easier for "
+ "humans to read and allows for computers to run data more efficiently.")
        sectionExplore:AddParagraph("Tidy Data typically contains these properties:")

        UnorderedList tidyList
        tidyList:AddClassAttribute("list-disc list-outside pl-8")
        tidyList:AddListItem("Variables must be in columns.")
        tidyList:AddListItem("Observations must be in rows.")
        tidyList:AddListItem("Individual cells must represent only one value.")
        sectionExplore:Add(tidyList)

        sectionExplore:AddParagraph("Below shows an example of what data would look like in Tidy format:")


        WebTable dataTable = AddWebTable("Tidy Data Example")
        TableBody dataTableBody = AddTableBody()
        
        Array<text> dataTableHeaderArray
        dataTableHeaderArray:Add("y")
        dataTableHeaderArray:Add("x1") 
        dataTableHeaderArray:Add("x2") 
        dataTableHeaderArray:Add("x3") 
   

        TableHeader dataTableHead = AddTableHeaderRow(dataTableHeaderArray)
        dataTable:Add(dataTableHead)  

        Array<text> dataRow1
        dataRow1:Add("1")
        dataRow1:Add("4")
        dataRow1:Add("-8")
        dataRow1:Add("23")
        dataTableBody:Add(AddTableBodyRow(dataRow1))

        Array<text> dataRow2
        dataRow2:Add("3")
        dataRow2:Add("73")
        dataRow2:Add("3")
        dataRow2:Add("5")
        dataTableBody:Add(AddTableBodyRow(dataRow2))

        Array<text> dataRow3
        dataRow3:Add("5")
        dataRow3:Add("12")
        dataRow3:Add("67")
        dataRow3:Add("20")
        dataTableBody:Add(AddTableBodyRow(dataRow3))

        Array<text> dataRow4
        dataRow4:Add("67")
        dataRow4:Add("4")
        dataRow4:Add("2")
        dataRow4:Add("2")
        dataTableBody:Add(AddTableBodyRow(dataRow4))

        Array<text> dataRow5
        dataRow5:Add("53")
        dataRow5:Add("7")
        dataRow5:Add("5")
        dataRow5:Add("6")
        dataTableBody:Add(AddTableBodyRow(dataRow5))
    
        dataTable:Add(dataTableBody)
        sectionExplore:Add(dataTable)

        sectionExplore:AddParagraph("In this example, y, x1, x2, and x3 are all variables and the first row is a header representing the name of those variables. "
+ "The remaining rows contain all of the data points for each variable. Each cell contains only one value.")

        AddHeading(sectionExplore, "Data Frames", 3)

        sectionExplore:AddParagraph("The key component in loading data with Quorum Language is to use a DataFrame. A DataFrame is a series of rows and columns, like "
+ "a table or spreadsheet. DataFrame objects can contain many kinds of things. For example, one column might contain text, another might contain numbers, and another "
+ "might contain integers. DataFrames can have selections, kind of like selecting a row or column in a spreadsheet, and can do operations on top of that selection.")
        sectionExplore:AddParagraph("While you would use them all pretty rarely, here are some examples of the types of data that you can load into a DataFrame by default:")

        WebTable columnTable = AddWebTable("DataFrame Columns")
        TableBody columnTableBody = AddTableBody()
        
        Array<text> columnTableHeaderArray
        columnTableHeaderArray:Add("y")
        columnTableHeaderArray:Add("x1")
   

        TableHeader columnTableHead = AddTableHeaderRow(columnTableHeaderArray)
        columnTable:Add(columnTableHead)  

        Array<text> columnRow1
        columnRow1:Add("AudioColumn")
        columnRow1:Add("Loads audio samples, for example from an MP3 file.")
        columnTableBody:Add(AddTableBodyRow(columnRow1))

        Array<text> columnRow2
        columnRow2:Add("BigIntegerColumn")
        columnRow2:Add("Loads really large integers, for values greater than 2,147483,647 or smaller than -2,147,483,648.")
        columnTableBody:Add(AddTableBodyRow(columnRow2))

        Array<text> columnRow3
        columnRow3:Add("BooleanColumn")
        columnRow3:Add("Loads boolean values that are true or false.")
        columnTableBody:Add(AddTableBodyRow(columnRow3))

        Array<text> columnRow4
        columnRow4:Add("IntegerColumn")
        columnRow4:Add("Loads integer values.")
        columnTableBody:Add(AddTableBodyRow(columnRow4))

        Array<text> columnRow5
        columnRow5:Add("NumberColumn")
        columnRow5:Add("Loads number values (integers with a decimal point).")
        columnTableBody:Add(AddTableBodyRow(columnRow5))

        Array<text> columnRow6
        columnRow6:Add("TextColumn")
        columnRow6:Add("Loads raw text as values.")
        columnTableBody:Add(AddTableBodyRow(columnRow6))

        Array<text> columnRow7
        columnRow7:Add("VectorColumn")
        columnRow7:Add("A mathematical optimization for number values used internally for matrix computations.")
        columnTableBody:Add(AddTableBodyRow(columnRow7))
    
        columnTable:Add(columnTableBody)
        sectionExplore:Add(columnTable)


        AddHeading(sectionExplore, "Loading Data and Selecting Columns", 3)
        sectionExplore:AddParagraph("When you want to use a DataFrame, you create a DataFrame object and call load. As code, this would be the following:")

        sectionExplore:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame" + cr
+ "DataFrame frame"))

        sectionExplore:AddParagraph("If you place <code>DataFrame frame</code>, or some other name, into the editor, you can then press ALT+ENTER to have it automatically find the appropriate "
+ "use statement. You can also right click, or use a keyboard shortcut for your operating system, to pull up the context menu, to have it insert the right line of code. From there, you can type into "
+ "the Filter and look for actions that may be related to loading. There are several, but the one you want is <code>frame:Load(location)</code>.")

        sectionExplore:AddImage("/media/Blocks/DataScience1/FindLoad.png", "A snippet of code that reads:
use Libraries.Compute.Statistics.DataFrame
DataFrame frame"):AddAttribute("data-zoom","")
        
        sectionExplore:AddParagraph("When you load this value though, something funny happens: you receive an error. The reason is  because the word " + dq + "location" + dq + " is a hint to the "
+ "human from the block, but the computer cannot determine what you likely mean from your current context. The bottom line is the scaffolded block is guessing (and not guessing particularly well in"
+ " this case). It thinks there is a variable called location, but this was a placeholder the blocks system put in place to provide the human a hint for what to provide.")

        sectionExplore:AddImage("/media/Blocks/DataScience1/BadGuesser.png", "A snippet of code that reads:
use Libraries.Compute.Statistics.DataFrame
DataFrame frame
frame:Load(location)

Location is a placeholder that still needs to be set which is causing the initial error"):AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("What you should input into this " + dq + "location" + dq + " placeholder is typically a file path of the CSV you want to load into the system. A best practice when loading CSV data "
+ "is to ensure you save the CSV in your project folder to quickly access it in your program.")

        AddHeading(sectionExplore, "Select Columns", 3)
        sectionExplore:AddParagraph("Once you have loaded data, you can tinker to find how to select columns as well. Selecting a column is kind of like clicking a column header in a spreadsheet application."
+ " It tells the system you want to do some kind of operation on an entire region. The action you want can be found by looking for words like select or column. The actual action you want would be "
+ "<code>AddSelectedColumn(n)</code> where n is the column index you are adding.")

        sectionExplore:AddImage("/media/Blocks/DataScience1/ToText.png", "A snippet of code that reads:
use Libraries.Compute.Statistics.DataFrame
DataFrame frame
frame:Load(''Data.csv'')
frame:AddSelectedColumnRange(0,2)"):AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("There are two ways to add a selected column to the selection list in DataFrame. One approach is to add it by an index, starting at 0, which is from the left hand side "
+ "in a spreadsheet. The other is to use its name, like " + dq + "Dog" + dq + " or " + dq + "Cat" + dq + ", as a text value. As a non-obvious rule, this name may not contain spaces. You may also select a "
+ "range of columns using <code>AddSelectedColumnRange(n1,n2)</code> where the n-parameters indicate the column index ranges you are trying to add.")

        AddHeading(sectionExplore, "Outputting a DataFrame", 3)
        sectionExplore:AddParagraph("Sometimes when using DataFrame objects, you want to get a sense for whether you have loaded it correctly. All DataFrame objects can output themselves to the console for "
+ "this purpose using an action called <code>ToText()</code>. There are three versions, <code>ToText</code> and two others with parameters related to printing out only pieces of the system.")
        sectionExplore:AddParagraph("For example, the following shows the output of 5 rows from " + dq + "Dogs.csv" + dq + ". It is important to note that although you have " + dq + "selected" + dq + " the columns,"
+ " the action <code>ToText()</code> will output the entire DataFrame. Your selection becomes useful when you are manipulating or transforming data such as adding your data to a chart. ")

        sectionExplore:AddImage("/media/Blocks/DataScience1/ToTextExample.png", "A snippet of code that reads:
use Libraries.Compute.Statistics.DataFrame
DataFrame frame
frame:Load(''Data.csv'')
frameLAddSelectedColumn(0)
frame:ToText()

The console output shows the CSV file. The content of this file is not important, but it contains about 10 columns of material."):AddAttribute("data-zoom","")

        AddHeading(sectionExplore, "Blocks in Disguise", 3)
        sectionExplore:AddParagraph("While up until now, you have used only the blocks system for programming, under the hood, you have been programming in text. All blocks, with no exceptions, are automatically "
+ "translated from text and on disk, all of the code can be examined in raw text. This means that any code used can be copy pasted as text into text editors, used on websites as text (e.g., Stack Overflow, Github)"
+ " and sent to each other in emails without pasting pictures. It can also be pasted back into the block editor in the same way. In many block languages, there is an academic debate about blocks or text, but in "
+ "Quorum blocks they are the same thing. When blocks are on, the system uses the exact same code, in exactly the same way, for exactly the same reason. The only difference, for the user, is that if they choose to"
+ " have them on, they look different and the searchable palette is available. Using them is personal preference.")
        sectionExplore:AddParagraph("As an example, the final code for this DataFrame example was copy pasted from the blocks environment and lives as text below:")

        sectionExplore:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame" + cr +
"DataFrame frame" + cr +
"frame:Load(" + dq + "data/Dogs.csv" + dq + ")" + cr +
"frame:AddSelectedColumnRange(0, 2)" + cr +
"frame:ToText(10)"))

        sectionExplore:AddParagraph("You can copy paste this example back and it would convert itself back to blocks. The number 10, in the final line of code, means to output only the first 10 lines of the DataFrame.")

        AddHeading(sectionExplore, "Finding Central Tendencies", 3)
        sectionExplore:AddParagraph("Finding operations that can be done in data science is explored through the palette. On the left-hand side where you go to click and drag all the blocks, or use the keyboard to "
+ "do the same operation, notice that there is a filter search. If you know the name of the operation you want, like mean, it will try to find supported actions. In this case, that is <code>frame:Mean()</code>.")

        sectionExplore:AddImage("/media/Blocks/DataScience1/DataFrameMean.png", "Screenshot of filtering the DataFrame object by finding the Mean action and filters out actions without the keyword: mean"):AddAttribute("data-zoom","")

        sectionExplore:AddParagraph("Now that you have placed your block, you will probably want to output the calculation. The nifty feature using Quorum blocks is that you are directly able to edit the text on the block "
+ " therefore when you have your mean action called, you can modify the block to be: <code>output frame:Mean()</code>. You can do the exact same operation in text and under the hood it really is identical. The difference "
+ "is you do not get the palette in text mode.")


        Section sectionEngage
        sectionEngage:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(sectionEngage)
        AddHeading(sectionEngage, "Engage", 2)

        sectionEngage:AddParagraph("Data science has historically been complex and can be daunting to understand. The language used by statisticians was often designed, written, and implemented by other statisticians "
+ "that likely could not have predicted data science would exist in the future, let alone that it might be programmed on a seemingly magical box that can do seemingly magical calculations. In this activity, you will "
+ "participate in statistical calculations, but unlike traditional statistics, you will achieve this through exploring DataFrame actions.")

        AddHeading(sectionEngage, "Introduction", 3)

        Paragraph introParagraph
        introParagraph:AddText("The broad idea in statistics is that tests are conducted to try to determine what is true or false. So far, you have selected a column, or a set of columns in a data set. Now you are going "
+ "to practice extracting and analyzing data. To start, ")
        introParagraph:AddLink("download the  National Weekly Pfizer Allocations for COVID-19 dataset.", "https://data.cdc.gov/Vaccinations/National-Weekly-Pfizer-Allocations/sxbq-3sid")
        sectionEngage:Add(introParagraph)

        sectionEngage:AddParagraph("Load the dataset into the system, then work with the two columns that contain numbers. The CSV file should go in the project folder where you made the project. For consistency, "
+ "use the name " + dq + "Data.csv" + dq + ". If you are unsure about the code, you may use the code from the explore section as a guide, and just change which columns are selected.")
        sectionEngage:AddParagraph("With your loaded dataset, you will be performing some statistical calculations with the DataFrame object. Here are some of the calculations you can perform by calling actions on the object:")

        UnorderedList calculationsList
        calculationsList:AddClassAttribute("list-disc list-outside pl-8")
        calculationsList:AddListItem("Mean")
        calculationsList:AddListItem("Median")
        calculationsList:AddListItem("Standard Deviation")
        calculationsList:AddListItem("Variance")
        calculationsList:AddListItem("Kurtosis")
        sectionEngage:Add(calculationsList)

        sectionEngage:AddParagraph("Use each of these statistical calculations on the dataset provided. Be sure to properly read in your CSV file and select a column to perform your calculations on.")
        sectionEngage:AddParagraph("If you want extra practice, try formatting your output to make your results readable using the following format:")

        sectionEngage:Add(preformatter:GeneratePreformattedCode("Central Tendencies of the following Column: [Column Header]" + cr +
"Mean: [DATA CALCULATION]" + cr +
"Median: [DATA CALCULATION]" + cr +
"Standard Deviation: [DATA CALCULATION]" + cr +
"Variance: [DATA CALCULATION]" + cr +
"Kurtosis: [DATA CALCULATION]"))
        
        sectionEngage:AddParagraph("If you have time, calculate the same tendencies with a different column after the first output. For this second calculation, you will need to duplicate your steps "
+ "and create an additional DataFrame object and repeat the load, or else you will encounter an error. However, this method seems a little inefficient. See if you can look through the available actions "
+ "inside of the blocks tab to " + dq + "empty" + dq + " your DataFrame.")
        sectionEngage:AddParagraph("When you properly completed the calculations, double check your answers with the output below:")

        sectionEngage:Add(preformatter:GeneratePreformattedCode("Central Tendencies of the following Column: 1st Dose Allocations" + cr +
"Mean: 62061.63265306125" + cr +
"Median: 38025.0" + cr +
"Standard Deviation: 81206.03894539685" + cr +
"Variance: 6.59442076120131E9" + cr +
"Kurtosis: 14.60309669876606" + cr +
"" + cr +
"Central Tendencies of the following Column: 2nd Dose Allocations" + cr +
"Mean: 61923.45238095237" + cr +
"Median: 38025.0" + cr +
"Standard Deviation: 81217.91840322685" + cr +
"Variance: 6.596350269753216E9" + cr +
"Kurtosis: 14.611164710632751"))


        AddHeading(sectionEngage, "Wrap up", 3)
        sectionEngage:AddParagraph("Reflect on what you have worked on in some applications of Data Science. Though you have scratched the surface, the operations have many more operations available. "
+ "For example, you can calculate regression formulas, create charts, and many other things. How do you imagine you could use such libraries in your setting? How would these libraries benefit a student"
+ " wanting to explore career paths in Data Science?")


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to load data and calculate its properties"
    end

    action GetSummaryName returns text
        return "Data Science Part 1"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Data Science, Part 1"
    end

    action GetShortDescription returns text
        return "data science in Quorum"
    end

    action GetLinkName returns text
        return "Data Science Part 1"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/blocks/DataScienceP1.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Blocks"
    end
end
