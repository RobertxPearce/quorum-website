use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image
use Libraries.Web.Page.Bold

class LibariesAndObjects is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Learn Libraries and Objects - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour 4: Libraries and Objects", 1)

        headDiv:AddText("This lesson is to teach you about libraries and objects in Quorum.")
        bodyDiv:Add(headDiv)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("Imagine you are a musician and play the violin. While you can play the main melody of a song, imagine if you were part of an orchestra and you have additional accompaniment such as cellos, basses, violas, or more violins. The music you play altogether sounds stronger and there is the added harmony. As a whole, these other instruments work together to make music sound better. Computers have their own accompaniment: libraries. Basically, libraries are code that usually someone else wrote and in this lesson you are going to learn about them. They are useful because they let you write more advanced code much more quickly than inventing it all yourself.")
       
       
        AddHeading(section_overview, "Goals", 3)
        section_overview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Learn how to use libraries")
        goalList:AddListItem("Create object variables")
        goalList:AddListItem("Learn how to tell objects to take actions")
        section_overview:Add(goalList)

        bodyDiv:Add(section_overview)

        Section section_warmUp
        section_warmUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_warmUp)
        AddHeading(section_warmUp, "Warm up", 2)
        
        section_warmUp:AddParagraph("Some types of applications are harder to invent than others. For example, a variable is a relatively simple thing, whereas a self-driving car might take a generation or two to invent with many engineers working on it. For something you are interested in inventing, what kind of libraries do you think you might need that you do not immediately know how to invent yourself?")
        
        AddHeading(section_warmUp, "Vocabulary", 3)

        section_warmUp:AddParagraph("You will be learning about the following vocabulary words: ")
        
        WebTable table = AddWebTable("Vocabulary")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Term")
        tableHeaderArray:Add("Definition") 
   

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Class")
        rubricText1:Add("A custom data type. Classes are a plan for constructing these custom data types in memory")
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("Object")
        rubricText2:Add("A class is a plan, whereas an object is one copy of that plan. ")
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("Library")
        rubricText3:Add("A library is a collection of code that defines a type of Object. Using a library lets you use the type of Object it describes.

")
        tableBody:Add(AddTableBodyRow(rubricText3))

         Array<text> rubricTextPackage
        rubricTextPackage:Add("Package")
        rubricTextPackage:Add("A package is a categorized group of libraries.")
        tableBody:Add(AddTableBodyRow(rubricTextPackage))

          Array<text> rubricTextAction
        rubricTextAction:Add("Action")
        rubricTextAction:Add("Actions are tasks that can be performed by variables. Different Object types have different Actions available.")
        tableBody:Add(AddTableBodyRow(rubricTextAction))

          Array<text> rubricTextParam
        rubricTextParam:Add("Parameter")
        rubricTextParam:Add("A parameter is a single piece of information that is input into an action when it executes.")
        tableBody:Add(AddTableBodyRow(rubricTextParam))

          Array<text> rubricTextSTL
        rubricTextSTL:Add("Standard Library")
        rubricTextSTL:Add("A set of libraries that are standard in a particular programming language. Most languages have invented their own standard library.")
        tableBody:Add(AddTableBodyRow(rubricTextSTL))
    
        table:Add(tableBody)
        section_warmUp:Add(table)

        section_warmUp:AddParagraph("")
        AddHeading(section_warmUp, "Code", 3)

        section_warmUp:AddParagraph("You will be using the following new pieces of code: ")


        WebTable tableCode = AddWebTable("New Code to Learn")
        TableBody tableBodyCode = AddTableBody()
        
        Array<text> tableHeaderArrayCode
        tableHeaderArrayCode:Add("Quorum Code")
        tableHeaderArrayCode:Add("Code Example") 
        tableHeaderArrayCode:Add("Explanation")

        TableHeader theadCode = AddTableHeaderRow(tableHeaderArrayCode)
        tableCode:Add(theadCode)  

        Array<text> rubricText4
        rubricText4:Add("use LIBRARY")
        rubricText4:Add("use Libraries.Compute.Math")
        rubricText4:Add("A use statement lets us use a type of Object in your program.") 
   
        tableBodyCode:Add(AddTableBodyRow(rubricText4))

        Array<text> rubricText5
        rubricText5:Add("TYPE NAME")
        rubricText5:Add("Math math")
        rubricText5:Add("A variable declaration that makes a new Object. Unlike primitive variables, Object variables do not need the "+dq+"="+dq+" sign.") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricText5))

    
        Array<text> rubricTextIf
        rubricTextIf:Add("NAME:ACTION()")
        rubricTextIf:Add("math:Action() [ex. math:AbsoluteValue(-5)]")
        rubricTextIf:Add("Instructs the variable to perform a specific, pre-programmed task") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricTextIf))

        tableCode:Add(tableBodyCode)
        section_warmUp:Add(tableCode)
        section_warmUp:AddParagraph("")

        AddHeading(section_warmUp, "CSTA Standards", 3)
         Paragraph cstaPara
        cstaPara:AddText("This lesson covers the following ")
        Link linkStandards = cstaPara:AddLink("standards", "https://csteachers.org/k12standards/interactive/")
        cstaPara:AddText(":")
        linkStandards:SetTarget(linkStandards:newTab)
        section_warmUp:Add(cstaPara)

        UnorderedList standards
        standards:AddClassAttribute("list-disc list-outside pl-8")
        standards:AddListItem("<strong>1B-AP-14</strong>: Observe intellectual property rights and give appropriate attribution when creating or remixing programs. ")
        standards:AddListItem("<strong>3A-AP-15</strong>: Justify the selection of specific control structures when tradeoffs involve implementation, readability, and program performance, and explain the benefits and drawbacks of choices made. ")
        standards:AddListItem("<strong>3A-AP-18</strong>: Create artifacts by using procedures within a program, combinations of data and procedures, or independent but interrelated programs. ")
        standards:AddListItem("<strong>3A-AP-20</strong>: Evaluate licenses that limit or restrict use of computational artifacts when using resources such as libraries. ")
        section_warmUp:Add(standards)
  
        Section section_explore
        section_explore:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_explore)
        AddHeading(section_explore, "Explore", 2)
        
        section_explore:AddParagraph("Sharing code can save time and effort. Many computer scientists have worked hard to create functionality and, if that code is under a license where others can use it, may be useful to others. In order to share code, programmers organize their work into libraries.")
        
        Bold bLib
        bLib:AddText("library")
        Paragraph libPara
        libPara:AddText("A ")
        libPara:Add(bLib)
        libPara:AddText(" is a collection of code that is organized to handle a specific kind of task. You can bring libraries into any program to help solve problems using pre-written code. To give an example from math, while addition and subtraction are easy, many more complex mathematical operations exist (e.g., logarithms, trig functions). Hypothetically, you could reinvent all of these systems, but they are difficult to write and understand.
")
        section_explore:Add(libPara)
        section_explore:AddParagraph("Quorum has many different libraries available, all of which under an open software license called BSD-3, which really just means they can be used for commercial or non-commercial purposes. Many other programming languages and environments exist with many being open source under a relatively open license. ")

         Link linkLibrary
        linkLibrary:AddText("Quorum Standard Library index page")
        linkLibrary:SetAddress("https://quorumlanguage.com/libraries.html")
        linkLibrary:SetTarget(linkLibrary:newTab)

         Bold bPack
        bPack:AddText("packages")

        Paragraph quorumLib
        quorumLib:AddText("While it would not make sense to use for light reading, the ")
        quorumLib:Add(linkLibrary)
        quorumLib:AddText(" has a list of all libraries. The Quorum Standard Library contains all pre-written code functions that can be used to make your programs easier to write. Here you will see a list of libraries on the left side of the page. The libraries are organized into groups called ")
        quorumLib:Add(bPack)
        quorumLib:AddText(". Packages are named in a way that sort of resembles a web address, using words separated by periods.
")

        section_explore:Add(quorumLib)
        Bold mathLib
        mathLib:AddText("Math")
        Bold mathLibCompute
        mathLibCompute:AddText("Libraries.Compute")

        Paragraph mathPara
        mathPara:AddText("One example of a library no rational person would want to write on their own is the ")
        mathPara:Add(mathLib)
        mathPara:AddText(" class in the package named ")
        mathPara:Add(mathLibCompute)
        mathPara:AddText(". Mathematical equations are important, no doubt, but dry and can be complex to figure out how to do them correctly and accurately. The center of the page shows documentation for the Math library, including a brief summary, an example, and a list of variables and actions. 
")
        section_explore:Add(mathPara)

         
        Image image = section_explore:AddImage("/media/Blocks/Libraries and Objects/Website.png","A screenshot of the Quorum Standard Library index. The Math class is selected from the Libraries.Compute package. The center of the page includes details on the library, headed by a title that says Libraries.Compute.Math Documentation, and includes a summary, example, and a list of variables.")
        image:AddText("A screenshot of the Quorum Standard Library index. The Math class is selected from the Libraries.Compute package. The center of the page includes details on the library, headed by a title that says Libraries.Compute.Math Documentation, and includes a summary, example, and a list of variables.")
        image:AddAttribute("data-zoom","")
        image:AddClassAttribute("overflow-hidden rounded")

        section_explore:AddParagraph("Programming languages often have quite a few libraries to choose from. Specifically in Quorum, for example, there are libraries for graphics, accessibility, many kinds of math, data science, gaming, robots, and much more. Normally, in a course on computer science, it would be unrealistic to learn it all and this is okay. Focusing on bigger picture concepts, while having fun in a domain of interest to you, is typical.")

        AddHeading(section_explore, "Math Library", 3)
        section_explore:AddParagraph("Now imagine using the Math library. In Quorum Studio, you can again create a new Console project from the File menu, using the toolbar, or using the hotkey (Ctrl + P or COMMAND + P for Windows or Mac, respectively). Open the Main.quorum file in your new project.")
        section_explore:AddParagraph("
In order to add a library to your program, you need a new block, the "+dq+"use"+dq+" block, which is located at the bottom of the "+dq+"Action"+dq+" category. Add the "+dq+"use"+dq+" block to your program. Your program should look like a red block that contains an error.
")
        Image image1 = section_explore:AddImage("/media/Blocks/Libraries and Objects/DefaultLibrary.png","A screenshot of Quorum Studio. On the left side, the block palette is set to the Action category, where the use block is located. On the right side, there is a program that contains exactly 1 block, which reads: use myLibrary")
        image1:AddText("A screenshot of Quorum Studio. On the left side, the block palette is set to the Action category, where the use block is located. On the right side, there is a program that contains exactly 1 block, which reads: use myLibrary")
        image1:AddAttribute("data-zoom","")
        image1:AddClassAttribute("overflow-hidden rounded")

        section_explore:AddParagraph("Inside the editable area of the block, it reads "+dq+"myLibrary."+dq+"  This is a placeholder value that must be replaced with the name of the library you want. At this point, the block should visually flash red, indicating that it is an error. In a screen reading device, if you land on a block, it will say something similar to:")
        section_explore:Add(preformatter:GeneratePreformattedCode("use myLibrary, ERROR + HINT. I could not locate the package named myLibrary. Are you sure you spelled it correctly?"))
        section_explore:AddParagraph("For Math, the full name of the library is Libraries.Compute.Math.")

        Image image2 = section_explore:AddImage("/media/Blocks/Libraries and Objects/MathLib.png","A snippet from Quorum Studio showing a program with a single line of code that reads: use Libraries.Compute.Math
The block is bright red because it is an error (but that's normal at this point).")
        image2:AddText("A snippet from Quorum Studio showing a program with a single line of code that reads: use Libraries.Compute.Math
The block is bright red because it is an error (but that's normal at this point).")
        image2:AddAttribute("data-zoom","")
        image2:AddClassAttribute("object-contain max-w-96 max-h-24 overflow-hidden rounded")

        section_explore:AddParagraph("With only this single line in the program, the block will still flash red, which seems wrong but is not. A single use block is telling the programming language you want access to a library, but you do not want to do anything with it. If you add more to the program, the block should stop flashing red.")
        section_explore:AddParagraph("If you then add a blank block. You can add it from the palette from the "+dq+"Basic"+dq+" category, or you can just select the "+dq+"use"+dq+" block in code and press Enter to add a new blank block beneath it. A blank block is exactly, and literally, equivalent to writing a line of code, blurring the line between blocks and text. ")
        section_explore:AddParagraph("In this blank block, to use math, you need to write a line of code to make an object. This is similar to the variables in the last lesson, but this time, you are going to be using a special type. The variable type is "+dq+"Math."+dq+" The name can be anything that follows the variable naming rules, but in the example below, the name is "+dq+"calculator."+dq+"")

        Image imageMathMore = section_explore:AddImage("/media/Blocks/Libraries and Objects/CreateMath.png","A snippet showing the current state of the program in Quorum Studio. It has the following blocks:
use Libraries.Compute.Math
Math calculator")
        imageMathMore:AddText("A snippet showing the current state of the program in Quorum Studio. It has the following blocks:
use Libraries.Compute.Math
Math calculator")
        imageMathMore:AddAttribute("data-zoom","")
        imageMathMore:AddClassAttribute("object-contain max-w-96 max-h-48 overflow-hidden rounded")

        Bold boldObj
        boldObj:AddText("Object")

        Paragraph objPara
        objPara:AddText("Although it looks different, this new block is making a new variable, just like you saw when you were working with the primitive types. Previously, you put simple values into your variables, like numbers or text. This time, you will put a complex value inside your container, called an ")
        objPara:Add(boldObj)
        objPara:AddText(". In this case, the object is a Math type, which is kind of like a scientific calculator you can use. ")
        section_explore:Add(objPara)

        section_explore:AddParagraph("One approach to learning a library would be to read all of the documentation, which likely sounds similar in level of fun to watching paint dry. Another approach is to have the computer help us and learn on the fly. Inside the block palette, you can go to the Advice category. Then, select the line "+dq+"Math calculator"+dq+" in your code. This automatically tells the system to go lookup what that line of code does and provide you some information. 
")  

        Image imageMath = section_explore:AddImage("/media/Blocks/Libraries and Objects/MathCalc.png","A screenshot of Quorum Studio. The Advice category is open, and the Math calculator block has been selected in the code. The palette shows a description of the Math type, a filter, and variables and actions available to the Math type. These actions include operations like the ceiling, the floor, hyperbolic cosine, or other scary sounding math names.")
        imageMath:AddText("A screenshot of Quorum Studio. The Advice category is open, and the Math calculator block has been selected in the code. The palette shows a description of the Math type, a filter, and variables and actions available to the Math type. These actions include operations like the ceiling, the floor, hyperbolic cosine, or other scary sounding math names.")
        imageMath:AddAttribute("data-zoom","")
        imageMath:AddClassAttribute("overflow-hidden rounded")

        Bold boldAct
        boldAct:AddText("Actions")
        Paragraph actionPara
        actionPara:AddText("The Advice category provides hints about what you can do with a line of code or what it might mean. The most important part is the section labeled ")
        actionPara:Add(boldAct)
        actionPara:AddText(". Actions are special tasks that Objects can perform. For example, the "+dq+"Math"+dq+" type object knows how to calculate absolute values or the cosine of an angle. Filters are available for searching through the options.
")
        section_explore:Add(actionPara)

        section_explore:AddParagraph("Actions have a specific structure when written as code. An action always begins with the name of the Object that is doing the task, followed by a colon. After the colon comes the name of the action that is being used, followed by a pair of parentheses. For example, with finding the Sine value of your "+dq+"Math"+dq+" object, the block of code would look like: <code>calculator:Sine(value)</code> where value is placeholder for any numerical value.")

        section_explore:AddParagraph("Depending on the action, different tasks require a different amount of information inside the parenthesis. For example, calculating the cosine of an angle requires a number, which is the angle. The "+dq+"RaiseToPower"+dq+" action needs two pieces of information, the base number and the exponent. These pieces of information are called <strong>parameters</strong>.")
        section_explore:AddParagraph("Some actions do not need any parameters at all. Even if the action doesn’t need any extra information, though, the parenthesis are always added to the end of an action. The following is an example of using <code>calculator:SquareRoot(value)</code>, which has an error in it. 
")
        Image image3 = section_explore:AddImage("/media/Blocks/Libraries and Objects/SqrtError.png","A screenshot of Quorum Studio. A new block has been added to the code, so the third line now reads calculator:SquareRoot(value). The block is flashing red. The palette on the left side is set to the Advice tab, and it has a message that says Errors: Could not find the variable value")
        image3:AddText("A screenshot of Quorum Studio. A new block has been added to the code, so the third line now reads calculator:SquareRoot(value). The block is flashing red. The palette on the left side is set to the Advice tab, and it has a message that says Errors: Could not find the variable value")
        image3:AddAttribute("data-zoom","")
        image3:AddClassAttribute("overflow-hidden rounded")

        section_explore:AddParagraph("Just like when you put the "+dq+"use"+dq+" statement in, your new block has a placeholder in the text, the part that says "+dq+"value."+dq+" This placeholder is a parameter to the action is the name value, which does not exist. You might replace that word with a number, like 0.
You can also put the value out to a variable or output it, like so in text:
")
        section_explore:Add(preformatter:GeneratePreformattedCode("number root = calculator:SquareRoot(4)
output root
"))

        section_explore:AddParagraph("Another view when graphically presented as the same code is as follows:
")
        Image image4 = section_explore:AddImage("/media/Blocks/Libraries and Objects/OutputRoot.png","A screenshot of a code snippet in Quorum Studio. The code reads:
use Libraries.Compute.Math
Math calculator
number root = calculator:SquareRoot(4)
output root")
        image4:AddText("A screenshot of a code snippet in Quorum Studio. The code reads:
use Libraries.Compute.Math
Math calculator
number root = calculator:SquareRoot(4)
output root")
        image4:AddAttribute("data-zoom","")
        image4:AddClassAttribute("object-contain max-w-96 max-h-48 overflow-hidden  rounded")

         Section section_engage
        section_engage:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_engage)
        AddHeading(section_engage, "Engage", 2)

        section_engage:AddParagraph("In this activity, you are going to go on a scavenger hunt to look for libraries that might interest you. You may be interested in learning to invent, or teaching others to invent, many different kinds of applications. This can vary in a seemingly endless number of ways. The goal here is to familiarize yourself with all of the options available in the current version of the standard library.")
        AddHeading(section_engage,"Directions",3)

        section_engage:AddParagraph("Pick a partner to do the scavenger hunt with. You are going to explore as a group different libraries for various kinds of applications. Your broad goal is to find two libraries in each of the following categories:")
        UnorderedList libList
        libList:AddClassAttribute("list-disc list-outside pl-8")
        libList:AddListItem("Interfaces")
        libList:AddListItem("Data Science")
        libList:AddListItem("Computer Graphics")
        libList:AddListItem("Accessibility")
        libList:AddListItem("Two more categories of your choosing")
        section_engage:Add(libList)

        section_engage:AddParagraph("As you go on your scavenger hunt, write down which libraries you think might be the most interesting and most useful. For the two you found the most interesting, look at the actions that the library can take and identify three of each you think might perform an interesting behavior.
")
        
        Link linkRef
        linkRef:AddText("Quorum Language Reference page")
        linkRef:SetAddress("https://quorumlanguage.com/reference.html")
        linkRef:SetTarget(linkRef:newTab)

        Paragraph helpfulLinks
        helpfulLinks:AddText("You may refer to the following links on the Quorum website to get you started in finding these libraries: ")
        helpfulLinks:Add(linkLibrary)
        helpfulLinks:AddText(" and  ")
        helpfulLinks:Add(linkRef)
        helpfulLinks:AddText(".")
        section_engage:Add(helpfulLinks)

        AddHeading(section_engage,"Wrap up",3)
        section_engage:AddParagraph("Once you are done, if time allows, each group can share aloud their top two most interesting libraries. Consider as a group what might be good targets for using in specifically computer science education.")
        
        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how use Quorum libraries and create objects"
    end

    action GetSummaryName returns text
        return "Libraries and Objects"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Libraries and Objects"
    end

    action GetShortDescription returns text
        return "how to read documentation in the Standard Library and create objects"
    end

    action GetLinkName returns text
        return "Libraries and Objects"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/blocks/LibrariesAndObjects.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Blocks"
    end
end
