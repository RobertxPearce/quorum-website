package Libraries.Web

use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator

class Problems is OrderedProblem
    text title = undefined
    text folder = undefined
    text id = undefined
    text description = undefined
    HashTable<text, integer> order
    Array<Problem> problemArray
    text root = undefined
    
    action Load(File file)
root = file:GetParentDirectory():GetAbsolutePath()
        JavaScriptObjectNotation json
        json:Read(file)
        
        //reset the values
        title = undefined
        folder = undefined
        order:Empty()
        problemArray:Empty()
        
i = 0
        repeat while i < json:GetSize()
            JavaScriptObjectNotation jsonKey = json:Get(i)
            ProcessKey(jsonKey)
            i = i + 1
        end
        
        if folder not= undefined
            ProcessFolder()
        end
    end
    
    
action CopyTo(text folder)
        i = 0
        repeat while i < problemArray:GetSize()
            Problem problem = problemArray:Get(i)
            problem:CopyTo(folder)
            i = i + 1
        end
end
    
    action Load(text path)
        File file
        file:SetPath(path)
        Load(file)
    end
    
    action ProcessFolder
        File file
        file:SetWorkingDirectory(root)
        file:SetPath(folder)
        if file:IsDirectory()
            //JSON or XML files depending on what it is
            Array<File> files = file:GetDirectoryListing()
            i = 0
            repeat while i < files:GetSize()
                File file2 = files:Get(i)
                text ext = file2:GetFileExtension()
                if ext = "json"
Problem problem
                    problem:Load(file2)
                    problem:SetProblems(me)
                    problemArray:Add(problem)
                elseif ext = "xml"
                end
                i = i + 1
            end
        end
        ProblemSetSorter sorter
        sorter:SetOrder(order)
        problemArray:Sort(sorter)
        
        i = 0
        repeat while i < problemArray:GetSize()
            problemArray:Get(i):SetIndex(i)
            i = i + 1
        end
    end
    
    
action ProcessKey(JavaScriptObjectNotation json)
        text key = json:GetKey()
        if key = "title"
            title = json:GetText()
        elseif key = "folder"
folder = json:GetText()
elseif key = "id"
id = json:GetText()
elseif key = "description"
description = json:GetText()
        elseif key = "order"
            JavaScriptObjectNotation theArray = json:GetArray()
            integer size = theArray:GetSize()
            i = 0
            repeat while i < size
                JavaScriptObjectNotation arrayValue = theArray:Get(i)
                text arrayKey = arrayValue:GetText()
                
                order:Add(arrayKey, i + 1)
                i = i + 1
            end
        end
    end
    action GetTitle returns text
        return title
    end

    action GetFolder returns text
        return folder
    end

    action GetId returns text
        return id
    end

    action GetDescription returns text
        return description
    end
    
    action GetProblemIterator returns Iterator<Problem>
        return problemArray:GetIterator()
    end
    
    action Get(integer index) returns Problem
        return problemArray:Get(index)
    end
    
    action GetSize returns integer
        return problemArray:GetSize()
    end
end
