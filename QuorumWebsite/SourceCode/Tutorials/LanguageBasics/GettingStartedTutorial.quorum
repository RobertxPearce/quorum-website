use Libraries.Web.Page.all
use Libraries.Containers.Array

class GettingStartedTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Getting Started - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Getting Started with Quorum", 1)

        headDiv:AddText("Install then create!")
        bodyDiv:Add(headDiv)

        Section section_installing_quorum
        section_installing_quorum:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_installing_quorum, "Installing Quorum Studio", 2)

        Paragraph p_installing_quorum
        p_installing_quorum:AddText(     "Quorum can be used online and offline as we see fit. For learning, using Quorum in the browser is often good enough, whereas for 
larger or more intense projects (e.g., physics, user interface design), we need to write our code using the desktop application Quorum Studio.  
On this page, we walk through obtaining the offline version of Quorum inside of Quorum Studio, our Integrated Development Environment (IDE). To do this, we first go to the ")
        Link link1 = p_installing_quorum:AddLink("download page","/download.html")
        link1:AddClassAttribute("underline text-quorum-blue-150")
        p_installing_quorum:AddText(            ", which contains links and instructions.")
        section_installing_quorum:Add(p_installing_quorum)


        //the section on creat a project
        Section section_creating_a_project
        section_creating_a_project:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_creating_a_project, "Creating a Quorum project", 2)

        // code part to change
        section_creating_a_project:AddParagraph(   "Once we have installed Quorum, we can create a project in Quorum Studio. There are many kinds of templates we 
can use for Quorum projects and they are categorized as follows:")
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "General Projects", ": These projects include either blank files or basic code outlines to run a new program")
        AddListItemWithBoldAtFront(list, "Graphics", ": There are several project templates for graphics, including templates related to games, image sheets, physics, and skyboxes")
        AddListItemWithBoldAtFront(list, "LEGO", ": There are project types for creating LEGO robot projects. All of these project types automatically setup the project to run it on a corresponding LEGO Mindstorms Robot.")
        AddListItemWithBoldAtFront(list, "Other", ": There are other kinds of project templates, including those for creating documentation, connecting to tools over the Internet, creating audio applications or user interfaces, and creating a web server.")
        section_creating_a_project:Add(list)
        

        section_creating_a_project:AddParagraph(   "These projects are templates and can be adjusted by us after being created however we see fit. 
In other words, just because we started a Lego robots project does not mean we cannot use that project for other types of code. 
To make any new project in the IDE, first we load Quorum Studio, which looks approximately like this:")

    
        //bodyDiv:Add(list2)
        Image image1 = section_creating_a_project:AddImage("/media/studio/window.png","This is an image of the default Quorum Studio environment start screen.")
        image1:AddAttribute("data-zoom", "")
        
        section_creating_a_project:AddParagraph(  "Next, we either press COMMAND + N on Mac, CTRL + N on Windows, open the File Menu -> New Project item or press the first button on the toolbar to open the New Project window, which looks like this:")
        
        Image image2 = section_creating_a_project:AddImage("/media/studio/NewProject.png","This image shows Quorum selected in the left pane and the four 
project types, in addition to a description field, a name field, and an ok button.")
        image2:AddAttribute("data-zoom", "")
        
        section_creating_a_project:AddParagraph("On the left hand side of this window is a tree that categorizes project types and lets us create them. For our purposes, we are going to open Graphics and select “Skybox.” This is an advanced template, but we are choosing it to highlight the types of applications that can be created. As an alternative for those that want audio applications, Other -> Sine Waves or User Interface would be good alternatives.")
        

        //the section on run or debug a program
        Section section_running_or_debugging_a_program
        section_running_or_debugging_a_program:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_running_or_debugging_a_program, "Running or Debugging a Quorum program", 2)
        section_running_or_debugging_a_program:AddParagraph(   "Once we have created a new project, we can use the tree of the project to 
navigate to a source file and open it. In the case of the skybox template, there are two folders, Skybox, 
and SourceCode. Our source files, for all projects, are always in the folder named SourceCode, even if we 
have other media files in the project. Using the normal navigation keys with the keyboard, left, right, up, or down, 
we can either navigate the tree with the keyboard or use the mouse to open the folder and select (or double click) Main.quorum. 
Once on the source code window, we can go back to the tree with COMMAND (or CTRL on Windows) + 1 key, then back to the editor with the same keys + 2. ")


        section_running_or_debugging_a_program:AddParagraph(   "To run a program, we can either press the green button on the top bar of the program, 
which looks like a play button on a remote control, or we can navigate to the Run menu and select Run Project. 
The standard hotkey is COMMAND + R on Mac and CTRL + R on Windows. The following shows an image of the run and debug buttons:")
        Image image3 = section_running_or_debugging_a_program:AddImage("/media/studio/Run.png","This is an image of Quorum Studio with a project open. On the top, 
     the run and debug buttons are present. All of these buttons are available with 
     keyboard shortcuts like COMMAND or CTRL + R for running and + D for debugging.")
        image3:AddAttribute("data-zoom", "")


        section_running_or_debugging_a_program:AddParagraph("To debug a program, the steps are similar. Normally, the purpose of debugging is 
to temporarily halt a program so that we can investigate it at a particular point in time. To do this, we have 
to set a breakpoint, which means set a point in our program where Quorum Studio knows to stop. This is accomplished 
by either clicking the vertical line where the line numbers are (called the line gutter), or by going to the line 
and using the hotkey (COMMAND + K on Mac or CTRL + K on Windows). The following is an image of a breakpoint that has been set: ")

        Image image4 = section_running_or_debugging_a_program:AddImage("/media/studio/breakpoint.png","This is an image of Quorum Studio with a breakpoint set.")
        image4:AddAttribute("data-zoom", "")

        section_running_or_debugging_a_program:AddParagraph(   "The following is an example of a breakpoint that has been hit:")

        Image image5 = section_running_or_debugging_a_program:AddImage("/media/studio/HitBreakpoint.png","This is an image of Quorum Studio with a breakpoint that has been hit in execution.")
        image5:AddAttribute("data-zoom", "")

        //the section on debugging controls
        Section section_debugging_controls
        AddHeading(section_debugging_controls, "Debugging Controls", 2)     
        section_debugging_controls:AddParagraph(   "Debugging and Running are very similar, except that with debugging we stop a program 
while it is running in order to inspect it for errors. We highly recommend using the debugger and memorizing 
the hotkeys, as they can be helpful when quickly investigating our code. The available controls are listed below: ")

        // Need Bold
        UnorderedList list6
        list6:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list6, "Start Debugging", " (CTRL + D or COMMAND + D): Start the debugger")
        AddListItemWithBoldAtFront(list6, "Stop Debugging", " (CTRL + E COMMAND + E): Stop the debugger.")
        AddListItemWithBoldAtFront(list6, "Pause", " (CTRL + F7): If a Quorum program is currently executing, this will temporarily stop it.")
        AddListItemWithBoldAtFront(list6, "Continue", " (CTRL + F8): If we are stopped at a breakpoint, this will resume execution of the program.")
        AddListItemWithBoldAtFront(list6, "Step Over", "(CTRL + F9): Execute the current line and stop at the next one.")
        AddListItemWithBoldAtFront(list6, "Step Into", " (CTRL + F10): Execute the current line and if the current line contains an action, go inside of that action and stop.")
        AddListItemWithBoldAtFront(list6, "Step Out", " (CTRL + F11): If we are inside of an action, finish it and stop again when control goes back to whatever component called that action.")
        AddListItemWithBoldAtFront(list6, "Run to Cursor", " (CTRL + F12): Continue the program until it hits the cursor. If the cursor is never hit, the program either runs forever or terminates.")  
        AddListItemWithBoldAtFront(list6, "Toggle Breakpoint", " (CTRL + K or COMMAND + K): Toggle a breakpoint on or off on a line of code")
        section_debugging_controls:Add(list6)

        bodyDiv:Add(section_installing_quorum)
        bodyDiv:Add(section_creating_a_project)
        bodyDiv:Add(section_running_or_debugging_a_program)
        bodyDiv:Add(section_debugging_controls)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to get started with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Started"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Getting Started"
    end

    action GetShortDescription returns text
        return "how to get started programming in Quorum"
    end

    action GetLinkName returns text
        return "Getting Started"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/language/gettingStarted.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Basics"
    end
end
