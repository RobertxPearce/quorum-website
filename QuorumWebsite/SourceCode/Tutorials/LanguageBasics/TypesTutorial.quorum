use Libraries.Web.Page.all
use Libraries.Containers.Array

class TypesTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Types and Variables - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Types and Variables", 1)

        headDiv:AddText("How to store various kinds of items in memory.")
        bodyDiv:Add(headDiv)

        Section section_primitive_types
        section_primitive_types:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_primitive_types, "Primitive Types in Quorum", 2)
        section_primitive_types:AddParagraph("When programming a computer, we often say that a "
            +"variable has a type. For example, suppose that I have a variable "
            +"with the name " + dq + "a" + dq + ". It could be the case that this variable is a "
            +"number, like 4.2, or it could be some text that we have written "
            +"for a book, like, " + dq + "It was the best of times." + dq 
            +" In Quorum, there are several types, and if those types are not "
            +"enough, we can define our own. In this section, we go over the "
            +"various types allowed in the Quorum programming language.")
        
        //the section on integers
        AddHeading(section_primitive_types, "integer", 3)
        section_primitive_types:AddParagraph("An integer is a number, either positive, negative,"
            +" or zero, that does not have a decimal point. You can create an "
            +"integer in Quorum by declaring it as follows:")

        section_primitive_types:Add(preformatter:GeneratePreformattedCode("integer a = 10" + cr + "output a"))
        section_primitive_types:AddParagraph("This would create a variable, named " + dq + "a" + dq + ", that has the value of 10. Similarly, while we can use the word " + dq + "integer" + dq + " before the variable named " + dq + "a" + dq + ", we can also optionally leave that off, like so:")
        section_primitive_types:Add(preformatter:GeneratePreformattedCode("a = 10" + cr + "output a"))

        CodeForIDE code1
        code1:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide1 = AddIDE()
        ide1:HideDisplay()
        ide1:SetLightTheme()
        ide1:SetCodeForIDE(code1:GetJsonArray())
        ide1:SetIdeTitle("Activity: Try integers")
        section_primitive_types:Add(ide1)

        //the section on numbers
        AddHeading(section_primitive_types, "number", 3)
        section_primitive_types:AddParagraph("A number is similar to an integer, except that it allows decimal points. For example:")

        section_primitive_types:Add(preformatter:GeneratePreformattedCode("number a = 10.4" + cr + "output a"))
        section_primitive_types:AddParagraph("Like before, the type annotation in this case is optional. We can either tell Quorum it is a number directly or we can allow Quorum to figure this out on its own. Either way, once Quorum has detected what a variable is defined as, it is fixed to that type to help prevent accidental mistakes. Like before, we can leave the type annotation off as so:")
        section_primitive_types:Add(preformatter:GeneratePreformattedCode("a = 10.4" + cr + "output a"))

        CodeForIDE code2
        code2:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide2 = AddIDE()
        ide2:HideDisplay()
        ide2:SetLightTheme()
        ide2:SetCodeForIDE(code2:GetJsonArray())
        ide2:SetIdeTitle("Activity: Try numbers")
        section_primitive_types:Add(ide2)

        //the section on booleans
        AddHeading(section_primitive_types, "boolean", 3)
        section_primitive_types:AddParagraph("The type of boolean has only two possible values, true and false. We can create a boolean as follows:")

        section_primitive_types:Add(preformatter:GeneratePreformattedCode("boolean a = true" + cr + "output a"))
        section_primitive_types:AddParagraph("To use a boolean, we can either create it directly, like above, using the keywords " + dq + "true" + dq + " or " + dq + "false" + dq + ". Alternatively, booleans come up regularly in computers when we compare different values. For example, suppose we had two integers, a and b, and we wanted to see whether a was " + dq + "bigger" + dq + " than b. We could do this using the following code:")
        section_primitive_types:Add(preformatter:GeneratePreformattedCode("integer a = 5" + cr +
            "integer b = 6" + cr +
            "boolean answer = a > b" + cr + 
            "c = answer //Quorum can figure out the type, if you prefer" + cr + "output c"))

        CodeForIDE code3
        code3:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide3 = AddIDE()
        ide3:HideDisplay()
        ide3:SetLightTheme()
        ide3:SetCodeForIDE(code3:GetJsonArray())
        ide3:SetIdeTitle("Activity: Try booleans")
        section_primitive_types:Add(ide3)

        //the section on booleans
        AddHeading(section_primitive_types,"text", 3)
        section_primitive_types:AddParagraph("The text type is designed to let you use normal written text in your computer program. You can type any phrase, from a phrase to a page in a book. You can create a variable of type text as follows:")

        section_primitive_types:Add(preformatter:GeneratePreformattedCode("text a = " + dq + "Hello, World!" + dq + cr + "output a"))

        CodeForIDE code4
        code4:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide4 = AddIDE()
        ide4:HideDisplay()
        ide4:SetLightTheme()
        ide4:SetCodeForIDE(code4:GetJsonArray())
        ide4:SetIdeTitle("Activity: Try text")
        section_primitive_types:Add(ide4)

        //the section on type conversion
        Section section_type_conversion
        section_type_conversion:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_type_conversion, "Type conversion", 2)
        section_type_conversion:AddParagraph("Sometimes you need to convert one type to another. This is called converting types, or more commonly, type casting. Suppose, for example, that you had text like so:")

        section_type_conversion:Add(preformatter:GeneratePreformattedCode("text someText = " + dq + "4.2" + dq + cr + "output someText"))
        section_type_conversion:AddParagraph("This text has the value of 4.2, which looks like a number would, but how would you convert it? In Quorum, you do this using the cast action:")
        section_type_conversion:Add(preformatter:GeneratePreformattedCode(
            "text someText = " + dq + "4.2" + dq + cr +
            "number someNumber = cast(number, someText)" + cr + 
            "output someNumber"))

        Paragraph p_type_conversion
        p_type_conversion:AddText(     "The word cast here indicates to the computer that you are requesting that the value of " + dq + "someText" + dq + " be converted into an actual number. "
                            +   "Keep in mind that we can pass invalid values here, like " + dq + "stuff" + dq + " that is not a valid number. In these cases, our program alert us to the fact that there is an error on the system. We can learn more about errors on the"
                            +   "In these cases, our program alert us to the fact that there is an error on the system. "
                            +   "We can learn more about errors on the ")
        Link link1 = p_type_conversion:AddLink("errors","/tutorials/language/errors.html")
        link1:AddClassAttribute("underline text-quorum-blue-150")
        p_type_conversion:AddText(            " page." )


        p_type_conversion:AddText(      "You can learn more about casting on the ")
        Link link2 = p_type_conversion:AddLink("type casting page","/tutorials/language/casting.html")
        link2:AddClassAttribute("underline text-quorum-blue-150")
        p_type_conversion:AddText(            "." )
        section_type_conversion:Add(p_type_conversion)

        CodeForIDE code5
        code5:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide5 = AddIDE()
        ide5:HideDisplay()
        ide5:SetLightTheme()
        ide5:SetCodeForIDE(code5:GetJsonArray())
        ide5:SetIdeTitle("Activity: Try Type Conversion")
        section_type_conversion:Add(ide5)


        //the section on variable names
        Section section_variable_names
        section_variable_names:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_variable_names, "Variable names", 2)
        section_variable_names:AddParagraph("While you can create variables of many types, the names have a few rules. 
First, variables can start with a letter or underscore, but generally letters are good practice. Past the first letter, 
you can use letters, numbers, or underscores, with the exception of the final character. The final one cannot be an underscore, 
which is because the programming language uses that character behind the scenes in special ways. 
For example, any of the following names would be allowed:")

        section_variable_names:Add(preformatter:GeneratePreformattedCode("integer sally = 5" + cr +
            "integer billy_likes_sally = 10" + cr +
            "integer billy_likes_sally2 = 15" + cr + 
            "output sally" + cr +
            "output billy_likes_sally" + cr + 
            "output billy_likes_sally2"
        ))

        section_variable_names:AddParagraph("However, none of the following names are allowed:")
        section_variable_names:Add(preformatter:GeneratePreformattedCode(
            "integer 5sally = 5 //a number cannot be the first character" + cr + 
            "integer sally_ = 10 //an underscore cannot be the final character" + cr + 
            "integer sall&&%%^$*#(y //not all characters are allowed to be used in names"
        ))


        CodeForIDE code6
        code6:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide6 = AddIDE()
        ide6:HideDisplay()
        ide6:SetLightTheme()
        ide6:SetCodeForIDE(code6:GetJsonArray())
        ide6:SetIdeTitle("Activity: Try Variable Naming")
        section_variable_names:Add(ide6)

        bodyDiv:Add(section_primitive_types)
        bodyDiv:Add(section_type_conversion)
        bodyDiv:Add(section_variable_names)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn more about types like integer and text using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Variables and Types"
    end

    action GetImageLocation returns text
        return "/media/basics/variables.png"
    end

    action GetName returns text
        return "types"
    end

    action GetShortDescription returns text
        return "how to use primitive data types"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
            return GetNewLocation()
        end
        return "tutorials/language/types.html"
    end

    action GetLinkName returns text
        return "Types and Variables"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Basics"
    end
end
