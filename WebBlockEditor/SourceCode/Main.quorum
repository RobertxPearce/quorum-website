package WebEditor

use Libraries.Language.Compile.Parsing.QuorumLexer
use Libraries.System.File
use Libraries.Language.Compile.Parsing.QuorumParser
use Libraries.Language.Compile.Context.StartContext
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Game.Game
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Interface.Options.LightBlockOptions
use Libraries.Game.InputTable
use Libraries.Game.InputSet
use Libraries.Interface.Options.DarkBlockOptions
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Game.Graphics.Font
use Libraries.Interface.Behaviors.Blocks.CodeEditorSelectionDownBehavior
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Behaviors.Blocks.CodeEditorSelectionUpBehavior
use Libraries.Interface.Behaviors.Blocks.CodeEditorSelectNextBehavior
use Libraries.Interface.Behaviors.Blocks.CodeEditorSelectPreviousBehavior
use Libraries.Interface.Behaviors.Blocks.CodeEditorEscapeBehavior
use Libraries.Interface.Behaviors.Controls.ScrollBarDragBehavior
use Libraries.Interface.Behaviors.Controls.ScrollableControlMouseScrollBehavior
use Libraries.Language.Compile.Blocks.ParserToBlockListener
use Libraries.Interface.Behaviors.Blocks.CodeEditorNewLineBehavior
use Libraries.Interface.Behaviors.Blocks.CodeEditorDeleteBlockBehavior
use Libraries.Interface.Behaviors.Blocks.CodeEditorFreeformEditingBehavior
use Libraries.Language.Compile.Parsing.FormatListener
use Libraries.Game.GameStateManager
use Libraries.Interface.Behaviors.Blocks.CodeEditorUndoBehavior
use Libraries.Interface.Behaviors.Blocks.CodeEditorRedoBehavior
use Libraries.Interface.Controls.Blocks.BlockSelectionListener
use Libraries.Language.Compile.Parsing.TokenIterator
use Libraries.Language.Compile.Parsing.Token
use Libraries.Game.WebConfiguration
use Libraries.Interface.Controls.Control
use Libraries.Game.DesktopConfiguration
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Blocks.Palette.BlockPalette
use Libraries.Game.Graphics.Fonts.FontManager
use Libraries.Interface.Accessibility
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Game.WebApplication
use WebEditor.Behaviors.all
use Libraries.Interface.Events.GestureEvent
use Libraries.Interface.Behaviors.Controls.ControlActivationBehavior
use Libraries.Interface.Accessibility.WebAccessibility
use Libraries.Interface.Events.WebAccessibilityListener
use Libraries.Interface.Events.WebAccessibilityEvent
use Libraries.Interface.Item
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Behaviors.Blocks.BlockPickUpBehavior

class BlockEditor is Game, Behavior, TextChangeListener, WebAccessibilityListener, FocusListener

    constant text CONTAINER_ID = "BlockUIContainer"
CodeEditor editor = undefined
ParserToBlockListener listener
    WebControlPanel palettePanel
    Control palettePartition
    WebControlPanel editorPanel
    BlockPalette editorPalette = undefined
    CodeEditor editorBlocks = undefined
    EditorItem paletteItem = undefined
    EditorItem blocksItem = undefined
    
    system action GetTextForIDE(text containerID) returns text
//    action GetTextForIDE(text containerID) returns text
//        return "output true"
    //end
    system action GetPaletteFileName(text containerID) returns text
    //action GetPaletteFileName(text containerID) returns text
//        return "palette.xml"
//    end
    
    system action RunGame
    system action StopGame
    system action UpdateTogglePaletteButton(boolean status)
    system action ShowHelpModal
    
    
    
action Main
        WebConfiguration config = GetWebConfiguration()
        config:title = "Block Editor"
        config:containerID = CONTAINER_ID
        SetConfiguration(config)
        DesktopConfiguration deskConfig = GetDesktopConfiguration()
        deskConfig:resizable = true
    StartGame()
end
    action OnExit returns boolean
        editor = undefined
        listener = undefined
palettePanel = undefined
    palettePartition = undefined
    editorPanel = undefined
    editorPalette = undefined
    editorBlocks = undefined
    paletteItem = undefined
    blocksItem = undefined
        return true
    end
 action CreateGame
        GameStateManager manager
        WebAccessibility webAccess = cast(WebAccessibility, manager:GetAccessibility())
webAccess:AddHiddenHeader("Navigation Area", "Navigation Menu, Landmark 1 of 5,
 You are on the Navigation Menu, swipe right to find buttons that will take you directly to the palette or editor. ")
        webAccess:AddHiddenButton("Go To Palette")
webAccess:AddHiddenButton("Go To Editor")
webAccess:AddHiddenButton("Exit")
webAccess:AddHiddenHeader("Block Control Area", "Block Control Menu, Landmark 2 of 5, 
You are on the Block Control Menu, swipe right to find buttons to move blocks around or delete them.")
        webAccess:AddHiddenButton("Pick Up Current")
webAccess:AddHiddenButton("Move Placeholder Block Up")
webAccess:AddHiddenButton("Move Placeholder Block Down")
webAccess:AddHiddenButton("Drop Block")
        webAccess:AddHiddenButton("Delete")
        webAccess:AddHiddenHeader("Edit Area", "Edit Menu, Landmark 3 of 5, 
You are on the Edit Menu, swipe right to find buttons to help you Undo and Redo in the block editor")
        webAccess:AddHiddenButton("Undo")
webAccess:AddHiddenButton("Redo")
        webAccess:AddWebAccessibilityListener(me)
LightBlockOptions options
      //DarkBlockOptions options
    SetInterfaceOptions(options)
        
listener:startLine= 0
        
FlowLayout layout
    SetLayout(layout)
    CodeEditor editor2
        editor = editor2
        
editor:SetBlockListener(listener)
    text read = ""
            read = GetTextForIDE(CONTAINER_ID)
            if read = ""
                read = "output true"
            end
      read = Format(read)
    
     integer size = 12
    BlockSelectionListener listen
    editor:SetPercentageWidth(1)
    editor:SetPercentageHeight(1)
    editor:SetFontSize(size)
    editor:AddSelectionListener(listen)
        editor:SetCode(read)
        
        BlockPalette palette
        palette:SetPercentageHeight(1)
palette:SetPercentageWidth(1)
        palette:SetEditor(editor)
        
        File customPalettePage
        customPalettePage = GetPaletteFile()
        if customPalettePage not= undefined
            palette:AddCustomPalettePage(customPalettePage)
        end
        
    Color color
        FlowLayout panelFlow
        panelFlow:SetSingleLine(true)
palettePanel:SetLayout(panelFlow)
        LayoutProperties panelProp = palettePanel:GetDefaultLayoutProperties()
        //panelProp:SetHorizontalLayoutMode(palettePanel:FIT_CONTENTS)
        palettePanel:SetPercentageX(0)
        palettePanel:SetPercentageY(0)
        palettePanel:SetPercentageHeight(1)
        palettePanel:SetPixelWidth(200)
        palettePanel:SetName("Palette Panel")
        palettePanel:SetAccessibilityCode(9)
        palettePanel:SetFocusable(false)
        
        FlowLayout flow
        editorPanel:SetLayout(flow)
editorPanel:SetPercentageY(0)
        editorPanel:SetPercentageHeight(1)
        editorPanel:SetHorizontalLayoutMode(editorPanel:parent:Control:FILL)
editorPanel:SetName("Editor Panel")
editorPanel:SetAccessibilityCode(9)
        editorPanel:SetFocusable(false)
        
        webAccess:AddHiddenHeader("paletteHeader", "Block Palette, Landmark 4 of 5, You are on the Block Palette Header, 
swipe right to find the items in the block palette, swipe left and you will find the other menus.
 Navigation by headings is recommended if you want to find other landmarks.", true)
        webAccess:AddHiddenLabel("paletteLabel", "Block Palette Help. Activate or double tap an item in the palette to insert into the text. 
Landmark 2 will point you to buttons that can help move the activated palette item in the editor.", true)
        Add(palettePanel)
        palettePanel:Add(palette)
        palette:IncludeSuggestions(false)
        palette:Setup()
        
        Control palettePartition = CreatePalettePartition()
        Add(palettePartition)
        AddPartitionInputTable(palettePanel)
        
webAccess:AddHiddenHeader("editorHeader", "Code Editor, Landmark 5 of 5, You are on the Code Editor Header, 
swipe right to find the items in the code editor, swipe left and you will find the palette.
 Navigation by headings is recommended if you want to find other landmarks.", true)
        Add(editorPanel)
editorPanel:Add(editor)
        
        CanvasResizeListener resizeListener
        resizeListener:AddPanel(palettePanel)
        resizeListener:AddPanel(editorPanel)
        AddResizeListener(resizeListener)
        me:editorPalette = palette
        me:editorBlocks = editor
       SetInterfaceScale(1.25)
        SetupEditorItems()
        AddDefaultKeys()
        paletteItem:Focus()
        AddFocusListener(me)
        SetColliding(false)
end
    
    action SetupEditorItems
GameStateManager manager
        WebApplication webApp = cast(WebApplication, manager:GetApplication())
        if webApp:GetWebOperatingSystem():Contains("Android") or webApp:GetWebOperatingSystem():Contains("iOS")
 or webApp:GetWebOperatingSystem():Contains("Mobile")
EditorItem tempPalette
        paletteItem = tempPalette
        paletteItem:SetName("Block Editor, You are in the Block Editor.
 If you are using a mobile screen reader navigation by headings is recommended. You will find 5 landmarks corresponding
 to 3 menus, the block palette, and then the block editor. Swipe Left and Right to navigate item by item.
 Swipe up and down to navigate by landmarks.")
        paletteItem:SetTarget(GetBlockPalette())
            Add(paletteItem)
            return now
        end
        EditorItem tempPalette
        paletteItem = tempPalette
        paletteItem:SetName("Palette, To navigate to the palette press Enter. To navigate to the editor use the arrow keys. To navigate back to here from the palette press Shift+Enter.")
        paletteItem:SetTarget(GetBlockPalette())
        
        EditorItem tempBlocks
        blocksItem = tempBlocks
        blocksItem:SetName("Block Editor, To navigate to the editor press Enter. To navigate to the palette use the arrow keys. To navigate back to here from the editor press Shift+Enter.")
        blocksItem:SetTarget(GetBlockEditor())
        
        paletteItem:SetNextFocus(blocksItem)
        paletteItem:SetPreviousFocus(blocksItem)
        blocksItem:SetNextFocus(paletteItem)
        blocksItem:SetPreviousFocus(paletteItem)
        Add(paletteItem)
        Add(blocksItem)
        
    end
    
    action AddDefaultKeys
        KeyboardEvent keys
InputTable defaultTable = GetDefaultInputTable()
        // Mac has different keys
        isMac = false
GameStateManager manager
        WebApplication webApp = cast(WebApplication, manager:GetApplication())
        if webApp:GetWebOperatingSystem():Contains("Mac")
            isMac = true
        end
        // Creating input sets for the default focus behaviors.
        InputSet focusPalette
        focusPalette:SetKeyboardInput(keys:NUM_1)
        if isMac
                                focusPalette:AddModifier(focusPalette:CONTROL)
        else
            focusPalette:AddModifier(focusPalette:ALT)
        end
        FocusPaletteBehavior focusPaletteBehavior
        defaultTable:Add(focusPalette, focusPaletteBehavior)
        
        
InputSet focusBlocks
        focusBlocks:SetKeyboardInput(keys:NUM_2)
        if isMac
                    focusBlocks:AddModifier(focusBlocks:CONTROL)
        else
            focusBlocks:AddModifier(focusBlocks:ALT)
        end
        FocusEditorBehavior focusEditorBehavior
        defaultTable:Add(focusBlocks, focusEditorBehavior)
        
InputSet runSet
        runSet:SetKeyboardInput(keys:R)
        runSet:AddModifier(runSet:SHIFT)
if isMac
                    runSet:AddModifier(runSet:CONTROL)
        else
runSet:AddModifier(runSet:ALT)
        end
        RunGameBehavior runBehavior
        defaultTable:Add(runSet, runBehavior)
        
InputSet stopSet
        stopSet:SetKeyboardInput(keys:S)
        stopSet:AddModifier(runSet:SHIFT)
if isMac
                    stopSet:AddModifier(runSet:CONTROL)
        else
stopSet:AddModifier(runSet:ALT)
        end
        StopGameBehavior stopBehavior
        defaultTable:Add(stopSet, stopBehavior)
        
InputSet togglePaletteSet
        togglePaletteSet:SetKeyboardInput(keys:X)
        togglePaletteSet:AddModifier(runSet:SHIFT)
if isMac
                    togglePaletteSet:AddModifier(togglePaletteSet:CONTROL)
        else
togglePaletteSet:AddModifier(togglePaletteSet:ALT)
        end
        TogglePaletteBehavior toggleBehavior
        defaultTable:Add(togglePaletteSet, toggleBehavior)
        
InputSet showHelpSet
        showHelpSet:SetKeyboardInput(keys:H)
        showHelpSet:AddModifier(runSet:SHIFT)
if isMac
                    showHelpSet:AddModifier(togglePaletteSet:CONTROL)
        else
showHelpSet:AddModifier(togglePaletteSet:ALT)
        end
        ShowHelpModalBehavior helpBehavior
        defaultTable:Add(showHelpSet, helpBehavior)
        
InputSet zoomInSet
        zoomInSet:SetKeyboardInput(keys:EQUALS)
if isMac
                    zoomInSet:AddModifier(zoomInSet:CONTROL)
        else
zoomInSet:AddModifier(zoomInSet:ALT)
        end
        ZoomBehavior zoomInBehavior
        zoomInBehavior:SetToZoomIn()
        defaultTable:Add(zoomInSet, zoomInBehavior)
        
InputSet zoomOutSet
        zoomOutSet:SetKeyboardInput(keys:MINUS)
if isMac
                    zoomOutSet:AddModifier(zoomOutSet:CONTROL)
        else
zoomOutSet:AddModifier(zoomOutSet:ALT)
        end
        ZoomBehavior zoomOutBehavior
        zoomOutBehavior:SetToZoomOut()
        defaultTable:Add(zoomOutSet, zoomOutBehavior)
        
InputTable editorTable
        editorTable:SetIdentifier("EditorItem")
        InputSet focusTargetSet
        focusTargetSet:SetKeyboardInput(keys:ENTER)
        EditorItemFocusTargetBehavior focusTargetBehavior
        editorTable:Add(focusTargetSet, focusTargetBehavior)
        
        InputSet left
        left:SetKeyboardInput(keys:LEFT)
        
        InputSet right
        right:SetKeyboardInput(keys:RIGHT)
        
        InputSet up
        up:SetKeyboardInput(keys:UP)
        
        InputSet down
        down:SetKeyboardInput(keys:DOWN)
        
        EditorItemFocusNext focusNext
        EditorItemFocusPrevious focusPrevious
        editorTable:Add(up, focusNext)
editorTable:Add(right, focusNext)
editorTable:Add(left, focusPrevious)
editorTable:Add(down, focusPrevious)
        AddInputTable(editorTable)
        
        InputSet focusEditorItemSet
        focusEditorItemSet:SetKeyboardInput(keys:ENTER)
        focusEditorItemSet:AddModifier(focusEditorItemSet:SHIFT)
        FocusEditorItemBehavior focusEditorItemBehavior
        focusEditorItemBehavior:SetPaletteItem(paletteItem)
        focusEditorItemBehavior:SetBlocksItem(blocksItem)
        defaultTable:Add(focusEditorItemSet,focusEditorItemBehavior)
        
        
InputSet swipeSet
        GestureEvent gestures
        swipeSet:SetGestureInput(gestures:SWIPE)

        InputSet tapSet
        tapSet:SetGestureInput(gestures:SINGLE_TAP)

        InputSet doubleTapSet
        doubleTapSet:SetGestureInput(gestures:DOUBLE_TAP)

        InputSet panBeginSet
        panBeginSet:SetGestureInput(gestures:PAN)
        panBeginSet:SetInputTrigger(panBeginSet:BEGIN)
InputSet panContinueSet
        panContinueSet:SetGestureInput(gestures:PAN)
        panContinueSet:SetInputTrigger(panContinueSet:CONTINUE)
InputSet panEndSet
        panEndSet:SetGestureInput(gestures:PAN)
        panEndSet:SetInputTrigger(panEndSet:FINISH)

        InputSet longPressSet
        longPressSet:SetGestureInput(gestures:LONG_PRESS)

        InputSet pinchSet
        pinchSet:SetGestureInput(gestures:PINCH)
        
        WebEditorSwipeBehavior swipeBehavior
        defaultTable:Add(swipeSet, swipeBehavior)
        
        WebEditorDoubleTapBehavior doubleTapBehavior
        defaultTable:Add(doubleTapSet, doubleTapBehavior)
        
        WebEditorLongPressBehavior longPressBehavior
        defaultTable:Add(longPressSet, longPressBehavior)
        
        WebEditorSingleTapBehavior singleTapBehavior
        defaultTable:Add(tapSet, singleTapBehavior)
        
        WebEditorPanBehavior panBehavior
        defaultTable:Add(panBeginSet, panBehavior)
defaultTable:Add(panContinueSet, panBehavior)
defaultTable:Add(panEndSet, panBehavior)
        
    end
    
 action Format(text source) returns text
    CompilerErrorManager manager
    QuorumLexer lexer
    lexer:SetIgnoreWhiteSpace(false)
    lexer:SetCompilerErrorManager(manager)
    lexer:Read(source)
    
    if not manager:IsCompilationErrorFree()
        text value = manager:GetCompilerErrorsAsText()
            output value
        return source
    end
    QuorumParser parser
    parser:SetCompilerErrorManager(manager)
    parser:SetLexer(lexer)
    StartContext start = parser:Start()
    if not manager:IsCompilationErrorFree()
        text value = manager:GetCompilerErrorsAsText()
            output value
        return source
    end
    FormatListener formatter
    formatter:SetQuorumLexer(lexer)
    formatter:SetSource(source)
    start:Traverse(formatter)
    
     text formatted = formatter:GetSourceFormatted()
    return formatted
end
    
    
action CreatePalettePartition returns Control
        Icon palettePartition
Color bgColor
        bgColor:SetColor(0.25,0.25,0.25,1)
        palettePartition:LoadFilledRectangle(4,500, bgColor)
        LayoutProperties paletteProperties = palettePartition:GetDefaultLayoutProperties()
        paletteProperties:SetPixelWidth(8)
        paletteProperties:SetVerticalLayoutMode(paletteProperties:FILL)
        
        palettePartition:SetInputGroup("PalettePartition")
        palettePartition:SetName("Palette Pane Partition")
        palettePartition:SetZ(-10)
        return palettePartition
    end
    
    action AddPartitionInputTable(Control palettePanel)
InputTable palettePartitionTable
        palettePartitionTable:SetIdentifier("PalettePartition")
        
        InputSet dragSet
        dragSet:SetDragItemInput()
        InputSet dragContinueSet = dragSet:Copy()
        dragContinueSet:SetInputTrigger(dragContinueSet:CONTINUE)
        PalettePartitionDragBehavior paletteDrag
        paletteDrag:SetPanel(palettePanel)
        
        palettePartitionTable:Add(dragSet, paletteDrag)
palettePartitionTable:Add(dragContinueSet, paletteDrag)
        AddInputTable(palettePartitionTable)
        
    end
    
    action GetPaletteFile returns File
        File file
        if GetPaletteFileName(CONTAINER_ID) not= ""
            file:SetPath(GetPaletteFileName(CONTAINER_ID))
            return file
        end
        return undefined
    end
    
    action FocusChanged(WebAccessibilityEvent event)
        text elementName = event:elementName
GameStateManager manager
        WebAccessibility webAccess = cast(WebAccessibility, manager:GetAccessibility())
        if elementName = "Go To Palette"
            editorPalette:Focus()
        elseif elementName = "Go To Editor"
            editorBlocks:Focus()
elseif elementName = "Pick Up Current"
if not editorBlocks:IsKeyboardMovingBlocks()
                BehaviorEvent pickUpEvent
                        pickUpEvent:SetItem(editorBlocks:GetSelectedBlocks():Get(0))
                text blockName = editorBlocks:GetSelectedBlocks():Get(0):GetName()
                BlockPickUpBehavior pickUpBehavior
                pickUpBehavior:Run(pickUpEvent)
                webAccess:ModifyHiddenSlider("Block Mover", 0, editorBlocks:GetLineCount() - 1, 1)
                webAccess:SetHiddenSliderCurrentValue("Block Mover", editorBlocks:GetSelection():GetLine())
                webAccess:SetHiddenSliderValueText("Block Mover", blockName)
                webAccess:FocusHiddenElement("Block Mover")
end
        elseif elementName = "Move Placeholder Block Down"
            if editorBlocks:IsKeyboardMovingBlocks()
                editorBlocks:MoveSelectionDown()
            end
elseif elementName = "Move Placeholder Block Up"
if editorBlocks:IsKeyboardMovingBlocks()
                editorBlocks:MoveSelectionUp()
            end
        elseif elementName = "Drop Block"
if editorBlocks:IsKeyboardMovingBlocks()
                editorBlocks:ConfirmKeyboardMovingBlocks()
end
elseif elementName = "Delete"
            editor:DeleteSelectedBlock(false)
            editor:Focus()
elseif elementName = "Undo"
            editor:GetBlockEditManager():Undo()
editor:Focus()
elseif elementName = "Redo"
editor:GetBlockEditManager():Redo()
editor:Focus()
        elseif elementName = "Exit"
            webAccess:ForceReleaseFocus()
elseif elementName = "Move Up"
            editor:MoveSelectionUp()
editor:Focus()
elseif elementName = "Move Down"
editor:MoveSelectionDown()
editor:Focus()
        end
        
    end
    
    action SliderChanged(WebAccessibilityEvent event)
        text elementName = event:GetElementName()
GameStateManager manager
        WebAccessibility webAccess = cast(WebAccessibility, manager:GetAccessibility())
        if elementName = "Block Mover"
            editorBlocks:SelectBlockAtLine(event:GetSliderValue())
text blockName = editorBlocks:GetSelectedBlocks():Get(0):GetName()
            webAccess:SetHiddenSliderValueText("Block Mover", blockName)
webAccess:FocusHiddenElement("Block Mover")
        end
    end
    
    action HiddenElementClicked(WebAccessibilityEvent event)
        Item clicked = event:GetItem()
        if clicked is Block
            if editor:IsKeyboardMovingBlocks()
                editor:ConfirmKeyboardMovingBlocks()
            end
        end
    end
    
action GainedFocus(FocusEvent event)
end

    action LostFocus(FocusEvent event)

    end
    
action IsInPalette(Item item) returns boolean
        repeat until item = undefined
            if item is BlockPalette
                return true
            else
                item = item:GetAccessibleParent()
            end
        end
        return false
    end
    
    action IsInBlockEditor(Item item) returns boolean
repeat until item = undefined
            if item is CodeEditor
                return true
            else
                item = item:GetAccessibleParent()
            end
        end
        return false
    end
    
    action SetCode(text code)
        me:editor:SetCode(code)
    end
    
    number scaleAmount = 0.2
    action ScaleUp
number scale = GetInterfaceScale()
            scale = scale + scaleAmount

        if scale >= 0.1
            SetInterfaceScale(scale)
    end
    end
    
    action ScaleDown
number scale = GetInterfaceScale()
            scale = scale - scaleAmount
        if scale >= 0.1
            SetInterfaceScale(scale)
    end
    end
    
    number lastWidth = 0
    action TogglePalette returns boolean
        if palettePanel:IsShowing()
            lastWidth = palettePanel:GetPixelWidth()
            palettePanel:SetPixelWidth(0)
            palettePanel:Hide()
            palettePartition:Hide()
            editorBlocks:Focus()
palettePanel:RequestLayout()
            return false
        else
            palettePanel:Show()
            palettePartition:Show()
            palettePanel:SetPixelWidth(lastWidth)
palettePanel:RequestLayout()
            return true
        end
    end
    
    action IsPaletteShowing returns boolean
        return palettePanel:IsShowing()
    end
    
    action GetBlockEditor returns CodeEditor
        return me:editorBlocks
    end
    
    action GetBlockPalette returns BlockPalette
        return me:editorPalette
    end

action Update(number seconds)
    
end
end
